import{_ as e,o as a,c as i,a as d}from"./app-rBywrD27.js";const n={},r=d(`<h1 id="docker-命令大全" tabindex="-1"><a class="header-anchor" href="#docker-命令大全" aria-hidden="true">#</a> Docker 命令大全</h1><h2 id="容器生命周期管理" tabindex="-1"><a class="header-anchor" href="#容器生命周期管理" aria-hidden="true">#</a> 容器生命周期管理</h2><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><p>docker run ：创建一个新的容器并运行一个命令</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明" tabindex="-1"><a class="header-anchor" href="#options说明" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-a stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li><li>-d: 后台运行容器，并返回容器ID；</li><li>-i: 以交互模式运行容器，通常与 -t 同时使用；</li><li>-P: 随机端口映射，容器内部端口随机映射到主机的端口</li><li>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</li><li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li>--name : 为容器指定一个名称；</li><li>--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</li><li>--dns-search example.com: 指定容器DNS搜索域名，默认和宿主一致；</li><li>-h &quot;mars&quot;: 指定容器的hostname；</li><li>-e username=&quot;ritchie&quot;: 设置环境变量；</li><li>--env-file=[]: 从指定文件读入环境变量；</li><li>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</li><li>-m :设置容器使用内存最大值；</li><li>--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li><li>--link=[]: 添加链接到另一个容器；</li><li>--expose=[]: 开放一个端口或一组端口；</li><li>--volume , -v: 绑定一个卷</li></ul><h4 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h4><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run --name mynginx -d nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -P -d nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /www/data 映射到容器的 /data。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -p 80:80 -v /www/data:/data -d nginx:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker run -p 127.0.0.1:80:8080/tcp ubuntu bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -it nginx:latest /bin/bash
root@b8573233d675:/# 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="start-stop-restart" tabindex="-1"><a class="header-anchor" href="#start-stop-restart" aria-hidden="true">#</a> start/stop/restart</h3><p>docker start :启动一个或多个已经被停止的容器 docker stop :停止一个运行中的容器 docker restart :重启容器</p><h4 id="语法-1" tabindex="-1"><a class="header-anchor" href="#语法-1" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker start [OPTIONS] CONTAINER [CONTAINER...]
docker stop [OPTIONS] CONTAINER [CONTAINER...]
docker restart [OPTIONS] CONTAINER [CONTAINER...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例-1" tabindex="-1"><a class="header-anchor" href="#实例-1" aria-hidden="true">#</a> 实例</h4><p>启动已被停止的容器 mynginx</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker start mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止运行中的容器 mynginx</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker stop mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启容器 mynginx</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker restart mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>停止所有容器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker stop $(docker ps -q)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill</h3><p>docker kill :杀掉一个运行中的容器。</p><h4 id="语法-2" tabindex="-1"><a class="header-anchor" href="#语法-2" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker kill [OPTIONS] CONTAINER [CONTAINER...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-1" tabindex="-1"><a class="header-anchor" href="#options说明-1" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-s :向容器发送一个信号</li></ul><h4 id="实例-2" tabindex="-1"><a class="header-anchor" href="#实例-2" aria-hidden="true">#</a> 实例</h4><p>杀掉运行中的容器mynginx</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker kill -s KILL mynginx
mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>杀死所有正在运行的容器</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker kill $(docker ps -a -q)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="rm" tabindex="-1"><a class="header-anchor" href="#rm" aria-hidden="true">#</a> rm</h3><p>docker rm ：删除一个或多个容器。</p><h4 id="语法-3" tabindex="-1"><a class="header-anchor" href="#语法-3" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm [OPTIONS] CONTAINER [CONTAINER...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-2" tabindex="-1"><a class="header-anchor" href="#options说明-2" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-f :通过 SIGKILL 信号强制删除一个运行中的容器。</li><li>-l :移除容器间的网络连接，而非容器本身。</li><li>-v :删除与容器关联的卷。</li></ul><h4 id="实例-3" tabindex="-1"><a class="header-anchor" href="#实例-3" aria-hidden="true">#</a> 实例</h4><p>强制删除容器 db01、db02：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm -f db01 db02
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>移除容器 nginx01 对容器 db01 的连接，连接名 db：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm -l db 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除容器 nginx01, 并删除容器挂载的数据卷：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm -v nginx01
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除所有已经停止的容器：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rm $(docker ps -a -q)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="pause-unpause" tabindex="-1"><a class="header-anchor" href="#pause-unpause" aria-hidden="true">#</a> pause/unpause</h3><p>docker pause :暂停容器中所有的进程。 docker unpause :恢复容器中所有的进程。</p><h4 id="语法-4" tabindex="-1"><a class="header-anchor" href="#语法-4" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pause CONTAINER [CONTAINER...]
docker unpause CONTAINER [CONTAINER...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例-4" tabindex="-1"><a class="header-anchor" href="#实例-4" aria-hidden="true">#</a> 实例</h4><p>暂停数据库容器db01提供服务。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pause db01
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>恢复数据库容器 db01 提供服务。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker unpause db01
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="create" tabindex="-1"><a class="header-anchor" href="#create" aria-hidden="true">#</a> create</h3><p>docker create ：创建一个新的容器但不启动它 用法同 <a href="#run">docker run</a></p><h4 id="语法-5" tabindex="-1"><a class="header-anchor" href="#语法-5" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker create [OPTIONS] IMAGE [COMMAND] [ARG...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>语法同 <a href="#run">docker run</a></p><h4 id="实例-5" tabindex="-1"><a class="header-anchor" href="#实例-5" aria-hidden="true">#</a> 实例</h4><p>使用docker镜像nginx:latest创建一个容器,并将容器命名为mynginx</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker create  --name mynginx  nginx:latest      
09b93464c2f75b7b69f83d56a9cfc23ceb50a48a9db7652ee4c27e3e2cb1961f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exec" tabindex="-1"><a class="header-anchor" href="#exec" aria-hidden="true">#</a> exec</h3><p>docker exec ：在运行的容器中执行命令</p><h4 id="语法-6" tabindex="-1"><a class="header-anchor" href="#语法-6" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-3" tabindex="-1"><a class="header-anchor" href="#options说明-3" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-d :分离模式: 在后台运行</li><li>-i :即使没有附加也保持STDIN 打开</li><li>-t :分配一个伪终端</li></ul><h4 id="实例-6" tabindex="-1"><a class="header-anchor" href="#实例-6" aria-hidden="true">#</a> 实例</h4><p>在容器 mynginx 中以交互模式执行容器内 /root/my.sh 脚本:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -it mynginx /bin/sh /root/my.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在容器 mynginx 中开启一个交互模式的终端:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -i -t  mynginx /bin/bash
root@b1a0703e41e7:/#
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过 <code>docker ps -a</code> 命令查看已经在运行的容器，然后使用容器 ID 进入容器。 查看已经在运行的容器 ID：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps -a 

9df70f9a0714        openjdk             &quot;/usercode/script.sh…&quot; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一列的 <code>9df70f9a0714</code> 就是容器 ID。 通过 exec 命令对指定的容器执行 bash:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker exec -it 9df70f9a0714 /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器操作" tabindex="-1"><a class="header-anchor" href="#容器操作" aria-hidden="true">#</a> 容器操作</h2><h3 id="ps" tabindex="-1"><a class="header-anchor" href="#ps" aria-hidden="true">#</a> ps</h3><p>docker ps : 列出容器</p><h4 id="语法-7" tabindex="-1"><a class="header-anchor" href="#语法-7" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-4" tabindex="-1"><a class="header-anchor" href="#options说明-4" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-a :显示所有的容器，包括未运行的。</li><li>-f :根据条件过滤显示的内容。</li><li>--format :指定返回值的模板文件。</li><li>-l :显示最近创建的容器。</li><li>-n :列出最近创建的n个容器。</li><li>--no-trunc :不截断输出。</li><li>-q :静默模式，只显示容器编号。</li><li>-s :显示总的文件大小。</li></ul><h4 id="实例-7" tabindex="-1"><a class="header-anchor" href="#实例-7" aria-hidden="true">#</a> 实例</h4><p>列出所有在运行的容器信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps
CONTAINER ID   IMAGE          COMMAND                ...  PORTS                    NAMES
09b93464c2f7   nginx:latest   &quot;nginx -g &#39;daemon off&quot; ...  80/tcp, 443/tcp          mynginx
96f7f14e99ab   mysql:5.6      &quot;docker-entrypoint.sh&quot; ...  0.0.0.0:3306-&gt;3306/tcp   mymysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出详情介绍：</p><ul><li>CONTAINER ID: 容器 ID。</li><li>IMAGE: 使用的镜像。</li><li>COMMAND: 启动容器时运行的命令。</li><li>CREATED: 容器的创建时间。</li><li>STATUS: 容器状态。 状态有7种： <ul><li>created（已创建）</li><li>restarting（重启中）</li><li>running（运行中）</li><li>removing（迁移中）</li><li>paused（暂停）</li><li>exited（停止）</li><li>dead（死亡）</li></ul></li><li>PORTS: 容器的端口信息和使用的连接类型（tcp\\udp）。</li><li>NAMES: 自动分配的容器名称</li></ul><p>列出最近创建的5个容器信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps -n 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出所有创建的容器ID。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps -a -q
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据标签过滤</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker run -d --name=test-nginx --label color=blue nginx
docker ps --filter &quot;label=color&quot;
docker ps --filter &quot;label=color=blue&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据名称过滤</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps --filter&quot;name=test-nginx&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据状态过滤</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ docker ps -a --filter &#39;exited=0&#39;
$ docker ps --filter status=running
$ docker ps --filter status=paused
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据镜像过滤</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#镜像名称
docker ps --filter ancestor=nginx
#镜像ID
docker ps --filter ancestor=d0e008c6cf02
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据启动顺序过滤</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker ps -f before=9c3527ed70ce
docker ps -f since=6e63f6ff38b0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inspect" tabindex="-1"><a class="header-anchor" href="#inspect" aria-hidden="true">#</a> inspect</h3><p>docker inspect : 获取容器/镜像的元数据。</p><h4 id="语法-8" tabindex="-1"><a class="header-anchor" href="#语法-8" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker inspect [OPTIONS] NAME|ID [NAME|ID...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-5" tabindex="-1"><a class="header-anchor" href="#options说明-5" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-f :指定返回值的模板文件。</li><li>-s :显示总的文件大小。</li><li>--type :为指定类型返回JSON。</li></ul><h4 id="实例-8" tabindex="-1"><a class="header-anchor" href="#实例-8" aria-hidden="true">#</a> 实例</h4><p>获取镜像mysql:5.6的元信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker inspect mysql:5.6
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取正在运行的容器mymysql的 IP。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker inspect --format=&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; mymysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="top" tabindex="-1"><a class="header-anchor" href="#top" aria-hidden="true">#</a> top</h3><p>docker top :查看容器中运行的进程信息，支持 ps 命令参数。</p><h4 id="语法-9" tabindex="-1"><a class="header-anchor" href="#语法-9" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker top [OPTIONS] CONTAINER [ps OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>容器运行时不一定有<code>/bin/bash</code>终端来交互执行<code>top</code>命令，而且容器还不一定有<code>top</code>命令，可以使用<code>docker top</code>来实现查看container中正在运行的进程。</p><h4 id="实例-9" tabindex="-1"><a class="header-anchor" href="#实例-9" aria-hidden="true">#</a> 实例</h4><p>查看容器mymysql的进程信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker top mymysql
UID    PID    PPID    C      STIME   TTY  TIME       CMD
999    40347  40331   18     00:58   ?    00:00:02   mysqld
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查看所有运行容器的进程信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>for i in  \`docker ps |grep Up|awk &#39;{print $1}&#39;\`;do echo \\ &amp;&amp;docker top $i; done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="attach" tabindex="-1"><a class="header-anchor" href="#attach" aria-hidden="true">#</a> attach</h3><p>docker attach :连接到正在运行中的容器。</p><h4 id="语法-10" tabindex="-1"><a class="header-anchor" href="#语法-10" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker attach [OPTIONS] CONTAINER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要attach上去的容器必须正在运行，可以同时连接上同一个container来共享屏幕（与screen命令的attach类似）。 官方文档中说attach后可以通过CTRL-C来detach，但实际上经过我的测试，如果container当前在运行bash，CTRL-C自然是当前行的输入，没有退出；如果container当前正在前台运行进程，如输出nginx的access.log日志，CTRL-C不仅会导致退出容器，而且还stop了。这不是我们想要的，detach的意思按理应该是脱离容器终端，但容器依然运行。好在attach是可以带上<code>--sig-proxy=false</code>来确保CTRL-D或CTRL-C不会关闭容器。</p><h4 id="实例-10" tabindex="-1"><a class="header-anchor" href="#实例-10" aria-hidden="true">#</a> 实例</h4><p>容器mynginx将访问日志指到标准输出，连接到容器查看访问信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker attach --sig-proxy=false mynginx
192.168.239.1 - - [10/Jul/2016:16:54:26 +0000] &quot;GET / HTTP/1.1&quot; 304 0 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.93 Safari/537.36&quot; &quot;-&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> events</h3><p>docker events : 从服务器获取实时事件</p><h4 id="语法-11" tabindex="-1"><a class="header-anchor" href="#语法-11" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker events [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-6" tabindex="-1"><a class="header-anchor" href="#options说明-6" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-f ：根据条件过滤事件；</li><li>--since ：从指定的时间戳后显示所有事件;</li><li>--until ：流水时间显示到指定的时间为止；</li></ul><h4 id="实例-11" tabindex="-1"><a class="header-anchor" href="#实例-11" aria-hidden="true">#</a> 实例</h4><p>显示docker 2016年7月1日后的所有事件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker events  --since=&quot;1467302400&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>显示docker 镜像为mysql:5.6 2016年7月1日后的相关事件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker events -f &quot;image&quot;=&quot;mysql:5.6&quot; --since=&quot;1467302400&quot; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果指定的时间是到秒级的，需要将时间转成时间戳。如果时间为日期的话，可以直接使用，如<code>--since=&quot;2016-07-01&quot;</code>。</p><h3 id="logs" tabindex="-1"><a class="header-anchor" href="#logs" aria-hidden="true">#</a> logs</h3><p>docker logs : 获取容器的日志</p><h4 id="语法-12" tabindex="-1"><a class="header-anchor" href="#语法-12" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs [OPTIONS] CONTAINER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-7" tabindex="-1"><a class="header-anchor" href="#options说明-7" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-f : 跟踪日志输出</li><li>--since :显示某个开始时间的所有日志</li><li>-t : 显示时间戳</li><li>--tail :仅列出最新N条容器日志</li></ul><h4 id="实例-12" tabindex="-1"><a class="header-anchor" href="#实例-12" aria-hidden="true">#</a> 实例</h4><p>跟踪查看容器mynginx的日志输出。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs -f mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看容器mynginx从2016年7月1日后的最新10条日志。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logs --since=&quot;2016-07-01&quot; --tail=10 mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h3><p>docker wait : 阻塞运行直到容器停止，然后打印出它的退出代码。</p><h4 id="语法-13" tabindex="-1"><a class="header-anchor" href="#语法-13" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker wait [OPTIONS] CONTAINER [CONTAINER...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-13" tabindex="-1"><a class="header-anchor" href="#实例-13" aria-hidden="true">#</a> 实例</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker wait CONTAINER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export</h3><p>docker export :将文件系统作为一个tar归档文件导出到STDOUT。</p><h4 id="语法-14" tabindex="-1"><a class="header-anchor" href="#语法-14" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker export [OPTIONS] CONTAINER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-8" tabindex="-1"><a class="header-anchor" href="#options说明-8" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-o :将输入内容写到文件。</li></ul><h4 id="实例-14" tabindex="-1"><a class="header-anchor" href="#实例-14" aria-hidden="true">#</a> 实例</h4><p>将id为a404c6c174a2的容器按日期保存为tar文件。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker export a404c6c174a2 &gt; mysql-\`date +%Y%m%d\`.tar
docker export -o mysql-\`date +%Y%m%d\`.tar a404c6c174a2
ls mysql-\`date +%Y%m%d\`.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="port" tabindex="-1"><a class="header-anchor" href="#port" aria-hidden="true">#</a> port</h3><p>docker port :列出指定的容器的端口映射，或者查找将PRIVATE_PORT NAT到面向公众的端口。</p><h4 id="语法-15" tabindex="-1"><a class="header-anchor" href="#语法-15" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-15" tabindex="-1"><a class="header-anchor" href="#实例-15" aria-hidden="true">#</a> 实例</h4><p>查看容器mynginx的端口映射情况。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker port mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="容器rootfs命令" tabindex="-1"><a class="header-anchor" href="#容器rootfs命令" aria-hidden="true">#</a> 容器rootfs命令</h2><h3 id="commit" tabindex="-1"><a class="header-anchor" href="#commit" aria-hidden="true">#</a> commit</h3><p>docker commit :从容器创建一个新的镜像。</p><h4 id="语法-16" tabindex="-1"><a class="header-anchor" href="#语法-16" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-9" tabindex="-1"><a class="header-anchor" href="#options说明-9" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-a :提交的镜像作者；</li><li>-c :使用Dockerfile指令来创建镜像；</li><li>-m :提交时的说明文字；</li><li>-p :在commit时，将容器暂停。</li></ul><h4 id="实例-16" tabindex="-1"><a class="header-anchor" href="#实例-16" aria-hidden="true">#</a> 实例</h4><p>将容器a404c6c174a2 保存为新的镜像,并添加提交人信息和说明信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker commit -a &quot;lzpeng723&quot; -m &quot;temp data&quot; a404c6c174a2  mymysql:v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="cp" tabindex="-1"><a class="header-anchor" href="#cp" aria-hidden="true">#</a> cp</h3><p>docker cp :用于容器与主机之间的数据拷贝。</p><h4 id="语法-17" tabindex="-1"><a class="header-anchor" href="#语法-17" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-
docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="options说明-10" tabindex="-1"><a class="header-anchor" href="#options说明-10" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-L :保持源目标中的链接</li></ul><h4 id="实例-17" tabindex="-1"><a class="header-anchor" href="#实例-17" aria-hidden="true">#</a> 实例</h4><p>将主机/www/pages目录拷贝到容器96f7f14e99ab的/www目录下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker cp /www/pages 96f7f14e99ab:/www/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将主机/www/pages目录拷贝到容器96f7f14e99ab中，目录重命名为www。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker cp /www/pages 96f7f14e99ab:/www
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker cp  96f7f14e99ab:/www /tmp/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="diff" tabindex="-1"><a class="header-anchor" href="#diff" aria-hidden="true">#</a> diff</h3><p>docker diff : 检查容器里文件结构的更改。</p><h4 id="语法-18" tabindex="-1"><a class="header-anchor" href="#语法-18" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker diff [OPTIONS] CONTAINER
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-18" tabindex="-1"><a class="header-anchor" href="#实例-18" aria-hidden="true">#</a> 实例</h4><p>查看容器mymysql的文件结构更改。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker diff mymysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="镜像仓库" tabindex="-1"><a class="header-anchor" href="#镜像仓库" aria-hidden="true">#</a> 镜像仓库</h2><h3 id="login" tabindex="-1"><a class="header-anchor" href="#login" aria-hidden="true">#</a> login</h3><p>docker login : 登陆到一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub docker logout : 登出一个Docker镜像仓库，如果未指定镜像仓库地址，默认为官方仓库 Docker Hub</p><h4 id="语法-19" tabindex="-1"><a class="header-anchor" href="#语法-19" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker login [OPTIONS] [SERVER]
docker logout [OPTIONS] [SERVER]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="options说明-11" tabindex="-1"><a class="header-anchor" href="#options说明-11" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-u :登陆的用户名</li><li>-p :登陆的密码</li></ul><h4 id="实例-19" tabindex="-1"><a class="header-anchor" href="#实例-19" aria-hidden="true">#</a> 实例</h4><p>登陆到Docker Hub</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker login -u 用户名 -p 密码
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>登出Docker Hub</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker logout
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="pull" tabindex="-1"><a class="header-anchor" href="#pull" aria-hidden="true">#</a> pull</h3><p>docker pull : 从镜像仓库中拉取或者更新指定镜像</p><h4 id="语法-20" tabindex="-1"><a class="header-anchor" href="#语法-20" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull [OPTIONS] NAME[:TAG|@DIGEST]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-12" tabindex="-1"><a class="header-anchor" href="#options说明-12" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-a :拉取所有 tagged 镜像</li><li>--disable-content-trust :忽略镜像的校验,默认开启</li></ul><h4 id="实例-20" tabindex="-1"><a class="header-anchor" href="#实例-20" aria-hidden="true">#</a> 实例</h4><p>从Docker Hub下载java最新版镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从Docker Hub下载REPOSITORY为java的所有镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull -a java
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h3><p>docker push : 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库</p><h4 id="语法-21" tabindex="-1"><a class="header-anchor" href="#语法-21" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker push [OPTIONS] NAME[:TAG]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-13" tabindex="-1"><a class="header-anchor" href="#options说明-13" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>--disable-content-trust :忽略镜像的校验,默认开启</li></ul><h4 id="实例-21" tabindex="-1"><a class="header-anchor" href="#实例-21" aria-hidden="true">#</a> 实例</h4><p>上传本地镜像myapache:v1到镜像仓库中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker push myapache:v1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="search" tabindex="-1"><a class="header-anchor" href="#search" aria-hidden="true">#</a> search</h3><p>docker search : 从Docker Hub查找镜像</p><h4 id="语法-22" tabindex="-1"><a class="header-anchor" href="#语法-22" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker search [OPTIONS] TERM
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-14" tabindex="-1"><a class="header-anchor" href="#options说明-14" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>--automated :只列出 automated build类型的镜像；</li><li>--no-trunc :显示完整的镜像描述；</li><li>-f &lt;过滤条件&gt;:列出收藏数不小于指定值的镜像。</li></ul><h4 id="实例-22" tabindex="-1"><a class="header-anchor" href="#实例-22" aria-hidden="true">#</a> 实例</h4><p>从 Docker Hub 查找所有镜像名包含 java，并且收藏数大于 10 的镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker search -f stars=10 java
NAME                  DESCRIPTION                           STARS   OFFICIAL   AUTOMATED
java                  Java is a concurrent, class-based...   1037    [OK]       
anapsix/alpine-java   Oracle Java 8 (and 7) with GLIBC ...   115                [OK]
develar/java                                                 46                 [OK]
isuper/java-oracle    This repository contains all java...   38                 [OK]
lwieske/java-8        Oracle Java 8 Container - Full + ...   27                 [OK]
nimmis/java-centos    This is docker images of CentOS 7...   13                 [OK]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li>NAME: 镜像仓库源的名称</li><li>DESCRIPTION: 镜像的描述</li><li>OFFICIAL: 是否 docker 官方发布</li><li>stars: 类似 Github 里面的 star，表示点赞、喜欢的意思。</li><li>AUTOMATED: 自动构建。</li></ul><h2 id="本地镜像管理" tabindex="-1"><a class="header-anchor" href="#本地镜像管理" aria-hidden="true">#</a> 本地镜像管理</h2><h3 id="images" tabindex="-1"><a class="header-anchor" href="#images" aria-hidden="true">#</a> images</h3><p>docker images : 列出本地镜像。</p><h4 id="语法-23" tabindex="-1"><a class="header-anchor" href="#语法-23" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker images [OPTIONS] [REPOSITORY[:TAG]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-15" tabindex="-1"><a class="header-anchor" href="#options说明-15" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-a :列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li><li>--digests :显示镜像的摘要信息；</li><li>-f :显示满足条件的镜像；</li><li>--format :指定返回值的模板文件；</li><li>--no-trunc :显示完整的镜像信息；</li><li>-q :只显示镜像ID。</li></ul><h4 id="实例-23" tabindex="-1"><a class="header-anchor" href="#实例-23" aria-hidden="true">#</a> 实例</h4><p>查看本地镜像列表。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>列出本地镜像中REPOSITORY为ubuntu的镜像列表。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker images  ubuntu
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="rmi" tabindex="-1"><a class="header-anchor" href="#rmi" aria-hidden="true">#</a> rmi</h3><p>docker rmi : 删除本地一个或多个镜像。</p><h4 id="语法-24" tabindex="-1"><a class="header-anchor" href="#语法-24" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi [OPTIONS] IMAGE [IMAGE...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-16" tabindex="-1"><a class="header-anchor" href="#options说明-16" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-f :强制删除；</li><li>--no-prune :不移除该镜像的过程镜像，默认移除；</li></ul><h4 id="实例-24" tabindex="-1"><a class="header-anchor" href="#实例-24" aria-hidden="true">#</a> 实例</h4><p>强制删除本地镜像 ubuntu:v4。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi -f ubuntu:v4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除所有未打 dangling 标签的镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi $(docker images -q -f dangling=true)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过镜像的id来删除指定镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi &lt;image id&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除所有镜像</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker rmi $(docker images -q)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> tag</h3><p>docker tag : 标记本地镜像，将其归入某一仓库。</p><h4 id="语法-25" tabindex="-1"><a class="header-anchor" href="#语法-25" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-25" tabindex="-1"><a class="header-anchor" href="#实例-25" aria-hidden="true">#</a> 实例</h4><p>将镜像ubuntu:15.10标记为 ubuntu:v3 镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker tag ubuntu:15.10 ubuntu:v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> build</h3><p>docker build 命令用于使用 Dockerfile 创建镜像。</p><h4 id="语法-26" tabindex="-1"><a class="header-anchor" href="#语法-26" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build [OPTIONS] PATH | URL | -
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-17" tabindex="-1"><a class="header-anchor" href="#options说明-17" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>--build-arg=[] :设置镜像创建时的变量；</li><li>--cpu-shares :设置 cpu 使用权重；</li><li>--cpu-period :限制 CPU CFS周期；</li><li>--cpu-quota :限制 CPU CFS配额；</li><li>--cpuset-cpus :指定使用的CPU id；</li><li>--cpuset-mems :指定使用的内存 id；</li><li>--disable-content-trust :忽略校验，默认开启；</li><li>-f :指定要使用的Dockerfile路径；</li><li>--force-rm :设置镜像过程中删除中间容器；</li><li>--isolation :使用容器隔离技术；</li><li>--label=[] :设置镜像使用的元数据；</li><li>-m :设置内存最大值；</li><li>--memory-swap :设置Swap的最大值为内存+swap，&quot;-1&quot;表示不限swap；</li><li>--no-cache :创建镜像的过程不使用缓存；</li><li>--pull :尝试去更新镜像的新版本；</li><li>--quiet, -q :安静模式，成功后只输出镜像 ID；</li><li>--rm :设置镜像成功后删除中间容器；</li><li>--shm-size :设置/dev/shm的大小，默认值是64M；</li><li>--ulimit :Ulimit配置。</li><li>--squash :将 Dockerfile 中所有的操作压缩为一层。</li><li>--tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li><li>--network: 默认 default。在构建期间设置RUN指令的网络模式</li></ul><h4 id="实例-26" tabindex="-1"><a class="header-anchor" href="#实例-26" aria-hidden="true">#</a> 实例</h4><p>使用当前目录的 Dockerfile 创建镜像，标签为 lzpeng723/blog:v1。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -t lzpeng723/blog:v1 . 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build github.com/creack/docker-firefox
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以通过 -f Dockerfile 文件的位置：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -f /path/to/a/Dockerfile .
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker build -t test/myapp .
Sending build context to Docker daemon 2.048 kB
Error response from daemon: Unknown instruction: RUNCMD
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h3><p>docker history : 查看指定镜像的创建历史。</p><h4 id="语法-27" tabindex="-1"><a class="header-anchor" href="#语法-27" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker history [OPTIONS] IMAGE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-18" tabindex="-1"><a class="header-anchor" href="#options说明-18" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-H :以可读的格式打印镜像大小和日期，默认为true；</li><li>--no-trunc :显示完整的提交记录；</li><li>-q :仅列出提交记录ID。</li></ul><h4 id="实例-27" tabindex="-1"><a class="header-anchor" href="#实例-27" aria-hidden="true">#</a> 实例</h4><p>查看本地镜像ubuntu:v3的创建历史。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker history ubuntu:v3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="save" tabindex="-1"><a class="header-anchor" href="#save" aria-hidden="true">#</a> save</h3><p>docker save : 将指定镜像保存成 tar 归档文件。</p><h4 id="语法-28" tabindex="-1"><a class="header-anchor" href="#语法-28" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker save [OPTIONS] IMAGE [IMAGE...]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options-说明" tabindex="-1"><a class="header-anchor" href="#options-说明" aria-hidden="true">#</a> OPTIONS 说明：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-o :输出到的文件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-28" tabindex="-1"><a class="header-anchor" href="#实例-28" aria-hidden="true">#</a> 实例</h4><p>将镜像 mynginx 生成 mynginx.tar 文档</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker save -o mynginx.tar mynginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="load" tabindex="-1"><a class="header-anchor" href="#load" aria-hidden="true">#</a> load</h3><p>docker load : 导入使用 <a href="#save">docker save</a> 命令导出的镜像。</p><h4 id="语法-29" tabindex="-1"><a class="header-anchor" href="#语法-29" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker load [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options-说明-1" tabindex="-1"><a class="header-anchor" href="#options-说明-1" aria-hidden="true">#</a> OPTIONS 说明：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>--input , -i : 指定导入的文件，代替 STDIN。

--quiet , -q : 精简输出信息。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实例-29" tabindex="-1"><a class="header-anchor" href="#实例-29" aria-hidden="true">#</a> 实例</h4><p>导入镜像：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker load &lt; busybox.tar.gz
docker load --input fedora.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h3><p>docker import : 从归档文件中创建镜像。</p><h4 id="语法-30" tabindex="-1"><a class="header-anchor" href="#语法-30" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker import [OPTIONS] file|URL|- [REPOSITORY[:TAG]]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-19" tabindex="-1"><a class="header-anchor" href="#options说明-19" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-c :应用docker 指令创建镜像；</li><li>-m :提交时的说明文字；</li></ul><h4 id="实例-30" tabindex="-1"><a class="header-anchor" href="#实例-30" aria-hidden="true">#</a> 实例</h4><p>从镜像归档文件mynginx.tar创建镜像，命名为mynginx:v4</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker import  mynginx.tar mynginx:v4  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="info-version" tabindex="-1"><a class="header-anchor" href="#info-version" aria-hidden="true">#</a> info|version</h2><h3 id="info" tabindex="-1"><a class="header-anchor" href="#info" aria-hidden="true">#</a> info</h3><p>docker info : 显示 Docker 系统信息，包括镜像和容器数。。</p><h4 id="语法-31" tabindex="-1"><a class="header-anchor" href="#语法-31" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker info [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="实例-31" tabindex="-1"><a class="header-anchor" href="#实例-31" aria-hidden="true">#</a> 实例</h4><p>查看docker系统信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> version</h3><p>docker version :显示 Docker 版本信息。</p><h4 id="语法-32" tabindex="-1"><a class="header-anchor" href="#语法-32" aria-hidden="true">#</a> 语法</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker version [OPTIONS]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="options说明-20" tabindex="-1"><a class="header-anchor" href="#options说明-20" aria-hidden="true">#</a> OPTIONS说明：</h4><ul><li>-f :指定返回值的模板文件。</li></ul><h4 id="实例-32" tabindex="-1"><a class="header-anchor" href="#实例-32" aria-hidden="true">#</a> 实例</h4><p>显示 Docker 版本信息。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker version
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,365),s=[r];function t(l,c){return a(),i("div",null,s)}const o=e(n,[["render",t],["__file","docker-command.html.vue"]]);export{o as default};
