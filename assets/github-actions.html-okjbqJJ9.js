import{_ as o,r as i,o as l,c,b as n,d as s,e as a,a as t}from"./app-U2nchfLp.js";const p="/assets/screts-config-Gz0Gx4UO.png",u="/assets/actions-run-log-LqDvmaVw.png",r="/assets/lzpeng723.github.io.home-jrlz6QoF.png",d={},b=n("h1",{id:"github-actions-入门教程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#github-actions-入门教程","aria-hidden":"true"},"#"),s(" GitHub Actions 入门教程")],-1),m=n("h2",{id:"一、github-actions-是什么",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、github-actions-是什么","aria-hidden":"true"},"#"),s(" 一、GitHub Actions 是什么？")],-1),k=n("p",null,"大家知道，持续集成由很多操作组成，比如抓取代码、运行测试、登录远程服务器，发布到第三方服务等等。GitHub 把这些操作就称为 actions。",-1),h=n("p",null,"很多操作在不同项目里面是类似的，完全可以共享。GitHub 注意到了这一点，想出了一个很妙的点子，允许开发者把每个操作写成独立的脚本文件，存放到代码仓库，使得其他开发者可以引用。",-1),v=n("p",null,"如果你需要某个 action，不必自己写复杂的脚本，直接引用他人写好的 action 即可，整个持续集成过程，就变成了一个 actions 的组合。这就是 GitHub Actions 最特别的地方。",-1),g={href:"https://github.com/marketplace?type=actions",target:"_blank",rel:"noopener noreferrer"},_={href:"https://github.com/sdras/awesome-actions",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("img",{src:"https://www.wangbase.com/blogimg/asset/201909/bg2019091105.jpg",alt:"Actions"})],-1),f=n("code",null,"userName/repoName",-1),w=n("code",null,"actions/setup-node",-1),j=n("code",null,"github.com/actions/setup-node",-1),x={href:"https://github.com/actions",target:"_blank",rel:"noopener noreferrer"},G={href:"https://help.github.com/en/articles/about-actions#versioning-your-action",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>actions/setup<span class="token punctuation">-</span>node@74bc508 <span class="token comment"># 指向一个 commit</span>
actions/setup<span class="token punctuation">-</span>node@v1.0    <span class="token comment"># 指向一个标签</span>
actions/setup<span class="token punctuation">-</span>node@master  <span class="token comment"># 指向一个分支</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、基本概念" tabindex="-1"><a class="header-anchor" href="#二、基本概念" aria-hidden="true">#</a> 二、基本概念</h2><p>GitHub Actions 有一些自己的术语。</p><ul><li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li><li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li><li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li><li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li></ul><h2 id="三、workflow-文件" tabindex="-1"><a class="header-anchor" href="#三、workflow-文件" aria-hidden="true">#</a> 三、workflow 文件</h2><p>GitHub Actions 的配置文件叫做 workflow 文件，存放在代码仓库的<code>.github/workflows</code>目录。</p>`,6),H={href:"https://www.ruanyifeng.com/blog/2016/07/yaml.html",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,".yml",-1),M=n("code",null,"foo.yml",-1),N=n("code",null,".github/workflows",-1),S=n("code",null,".yml",-1),I={href:"https://help.github.com/en/articles/workflow-syntax-for-github-actions",target:"_blank",rel:"noopener noreferrer"},L=t(`<h3 id="_1-name" tabindex="-1"><a class="header-anchor" href="#_1-name" aria-hidden="true">#</a> （1）name</h3><p>name字段是 workflow 的名称。如果省略该字段，默认为当前 workflow 的文件名。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> GitHub Actions Demo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-on" tabindex="-1"><a class="header-anchor" href="#_2-on" aria-hidden="true">#</a> （2）on</h3><p><code>on</code>字段指定触发 workflow 的条件，通常是某些事件。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码指定，<code>push</code>事件触发 workflow。</p><p><code>on</code>字段也可以是事件的数组。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>push<span class="token punctuation">,</span> pull_request<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面代码指定，<code>push</code>事件或<code>pull_request</code>事件都可以触发 workflow。</p>`,10),C={href:"https://help.github.com/en/articles/events-that-trigger-workflows",target:"_blank",rel:"noopener noreferrer"},D=t(`<h3 id="_3-on-push-pull-request-tags-branches" tabindex="-1"><a class="header-anchor" href="#_3-on-push-pull-request-tags-branches" aria-hidden="true">#</a> （3）on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;</h3><p>指定触发事件时，可以限定分支或标签。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>    
      <span class="token punctuation">-</span> master

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码指定，只有<code>master</code>分支发生<code>push</code>事件时，才会触发 workflow。</p><h3 id="_4-jobs-job-id-name" tabindex="-1"><a class="header-anchor" href="#_4-jobs-job-id-name" aria-hidden="true">#</a> （4）jobs.&lt;job_id&gt;.name</h3><p>workflow 文件的主体是<code>jobs</code>字段，表示要执行的一项或多项任务。</p><p><code>jobs</code>字段里面，需要写出每一项任务的<code>job_id</code>，具体名称自定义。<code>job_id</code>里面的<code>name</code>字段是任务的说明。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">my_first_job</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> My first job
  <span class="token key atrule">my_second_job</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> My second job
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的jobs字段包含两项任务，<code>job_id</code>分别是<code>my_first_job</code>和<code>my_second_job</code>。</p><h3 id="_5-jobs-job-id-needs" tabindex="-1"><a class="header-anchor" href="#_5-jobs-job-id-needs" aria-hidden="true">#</a> （5）jobs.&lt;job_id&gt;.needs</h3><p><code>needs</code>字段指定当前任务的依赖关系，即运行顺序。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">job1</span><span class="token punctuation">:</span>
  <span class="token key atrule">job2</span><span class="token punctuation">:</span>
    <span class="token key atrule">needs</span><span class="token punctuation">:</span> job1
  <span class="token key atrule">job3</span><span class="token punctuation">:</span>
    <span class="token key atrule">needs</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>job1<span class="token punctuation">,</span> job2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>job1</code>必须先于<code>job2</code>完成，而<code>job3</code>等待<code>job1</code>和<code>job2</code>的完成才能运行。因此，这个 workflow 的运行顺序依次为：<code>job1</code>、<code>job2</code>、<code>job3</code>。</p><h3 id="_6-jobs-job-id-runs-on" tabindex="-1"><a class="header-anchor" href="#_6-jobs-job-id-runs-on" aria-hidden="true">#</a> （6）jobs.&lt;job_id&gt;.runs-on</h3><p><code>runs-on</code>字段指定运行所需要的虚拟机环境。它是必填字段。目前可用的虚拟机如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ubuntu-latest，ubuntu-18.04或ubuntu-16.04
windows-latest，windows-2019或windows-2016
macOS-latest或macOS-10.14
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面代码指定虚拟机环境为<code>ubuntu-18.04</code>。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span><span class="token number">18.04</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-jobs-job-id-steps" tabindex="-1"><a class="header-anchor" href="#_7-jobs-job-id-steps" aria-hidden="true">#</a> （7）jobs.&lt;job_id&gt;.steps</h3><p><code>steps</code>字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>jobs.&lt;job_id<span class="token punctuation">&gt;</span>.steps.name：步骤名称。
jobs.&lt;job_id<span class="token punctuation">&gt;</span>.steps.run：该步骤运行的命令或者 action。
jobs.&lt;job_id<span class="token punctuation">&gt;</span>.steps.env：该步骤所需的环境变量。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是一个完整的 workflow 文件的范例。</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Greeting from Mona
<span class="token key atrule">on</span><span class="token punctuation">:</span> push

<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">my-job</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> My Job
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Print a greeting
      <span class="token key atrule">env</span><span class="token punctuation">:</span>
        <span class="token key atrule">MY_VAR</span><span class="token punctuation">:</span> Hi there<span class="token tag">!</span> My name is
        <span class="token key atrule">FIRST_NAME</span><span class="token punctuation">:</span> Mona
        <span class="token key atrule">MIDDLE_NAME</span><span class="token punctuation">:</span> The
        <span class="token key atrule">LAST_NAME</span><span class="token punctuation">:</span> Octocat
      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        echo $MY_VAR $FIRST_NAME $MIDDLE_NAME $LAST_NAME.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，<code>steps</code>字段只包括一个步骤。该步骤先注入四个环境变量，然后执行一条 Bash 命令。</p><h2 id="四、实例-vuepress-项目发布到-github-pages" tabindex="-1"><a class="header-anchor" href="#四、实例-vuepress-项目发布到-github-pages" aria-hidden="true">#</a> 四、实例：VuePress 项目发布到 GitHub Pages</h2>`,25),T={href:"https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line",target:"_blank",rel:"noopener noreferrer"},B=n("code",null,"Settings/Secrets",-1),O=n("p",null,[n("img",{src:p,alt:"Settings/Secrets"})],-1),V=n("p",null,[s("上图是储存密钥的环境变量的地方。环境变量的名字可以随便起，这里用的是"),n("code",null,"ACCESS_TOKEN"),s("。如果你不用这个名字，后面脚本里的变量名也要跟着改。")],-1),z=n("code",null,"vuepress-theme-reco",-1),q={href:"https://vuepress-theme-reco.recoluan.com/",target:"_blank",rel:"noopener noreferrer"},P=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># npx</span>
npx @vuepress-reco/theme-cli init

<span class="token comment"># npm</span>
<span class="token function">npm</span> <span class="token function">install</span> @vuepress-reco/theme-cli <span class="token parameter variable">-g</span>
theme-cli init

<span class="token comment"># yarn</span>
<span class="token function">yarn</span> global <span class="token function">add</span> @vuepress-reco/theme-cli
theme-cli init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，在这个仓库的<code>.github/workflows</code>目录，生成一个 workflow 文件，名字可以随便取，这个示例是<code>build-and-deploy-github-page.yml</code>。</p>`,2),R={href:"https://github.com/marketplace/actions/deploy-to-github-pages",target:"_blank",rel:"noopener noreferrer"},F=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">name</span><span class="token punctuation">:</span> Build and Deploy Github Page
<span class="token key atrule">on</span><span class="token punctuation">:</span>
  <span class="token key atrule">push</span><span class="token punctuation">:</span>
    <span class="token key atrule">branches</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> gh<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>source
<span class="token key atrule">jobs</span><span class="token punctuation">:</span>
  <span class="token key atrule">build-and-deploy</span><span class="token punctuation">:</span>
    <span class="token key atrule">runs-on</span><span class="token punctuation">:</span> ubuntu<span class="token punctuation">-</span>latest
    <span class="token key atrule">steps</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Checkout 🛎️
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> actions/checkout@v2.3.1 <span class="token comment"># If you&#39;re using actions/checkout@v2 you must set persist-credentials to false in most cases for the deployment to work correctly.</span>
      <span class="token key atrule">with</span><span class="token punctuation">:</span>
        <span class="token key atrule">persist-credentials</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Install and Build
      <span class="token key atrule">run</span><span class="token punctuation">:</span> <span class="token punctuation">|</span><span class="token scalar string">
        npm install
        npm run build</span>
    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Deploy 🚀
      <span class="token key atrule">uses</span><span class="token punctuation">:</span> JamesIves/github<span class="token punctuation">-</span>pages<span class="token punctuation">-</span>deploy<span class="token punctuation">-</span>action@4.1.5
      <span class="token key atrule">with</span><span class="token punctuation">:</span>
        <span class="token key atrule">ACCESS_TOKEN</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span><span class="token punctuation">{</span> secrets.ACCESS_TOKEN <span class="token punctuation">}</span><span class="token punctuation">}</span>
        <span class="token key atrule">BRANCH</span><span class="token punctuation">:</span> master
        <span class="token key atrule">FOLDER</span><span class="token punctuation">:</span> dest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个 workflow 文件的要点如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>整个流程在gh-pages-source分支发生push事件时触发。
只有一个job，运行在虚拟机环境ubuntu-latest。
第一步是获取源码，使用的 action 是actions/checkout。
第二步是构建和部署，使用的 action 是JamesIves/github-pages-deploy-action。
第二步需要四个环境变量，分别为 GitHub 密钥、发布分支、构建成果所在目录、构建脚本。其中，只有 GitHub 密钥是秘密变量，需要写在双括号里面，其他三个都可以直接写在文件里。
第五步，保存上面的文件后，将整个仓库推送到 GitHub。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),J={href:"https://github.com/lzpeng723/lzpeng723.github.io/runs/3677817886?check_suite_focus=true",target:"_blank",rel:"noopener noreferrer"},$=n("p",null,[n("img",{src:u,alt:"actions"})],-1),K={href:"https://lzpeng723.github.io",target:"_blank",rel:"noopener noreferrer"},Y=n("p",null,[n("img",{src:r,alt:"home"})],-1),W=n("p",null,"以后，每次修改后推送源码，GitHub Actions 都会自动运行，将构建产物发布到网页。",-1),Q=n("h3",{id:"五、参考链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#五、参考链接","aria-hidden":"true"},"#"),s(" 五、参考链接")],-1),U={href:"http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html",target:"_blank",rel:"noopener noreferrer"},Z={href:"https://help.github.com/en/categories/automating-your-workflow-with-github-actions",target:"_blank",rel:"noopener noreferrer"},X={href:"https://lukeboyle.com/blog-posts/2019/08/github-actions-for-web-apps/",target:"_blank",rel:"noopener noreferrer"},nn={href:"https://medium.com/@adam.zolyak/my-first-week-with-github-actions-5d92de4c4851",target:"_blank",rel:"noopener noreferrer"};function sn(en,an){const e=i("ExternalLinkIcon");return l(),c("div",null,[b,m,k,h,v,n("p",null,[s("GitHub 做了一个"),n("a",g,[s("官方市场"),a(e)]),s("，可以搜索到他人提交的 actions。另外，还有一个 "),n("a",_,[s("awesome actions"),a(e)]),s(" 的仓库，也可以找到不少 action。")]),y,n("p",null,[s("上面说了，每个 action 就是一个独立脚本，因此可以做成代码仓库，使用"),f,s("的语法引用 action。比如，"),w,s("就表示"),j,s("这个仓库，它代表一个 action，作用是安装 Node.js。事实上，GitHub 官方的 actions 都放在 "),n("a",x,[s("github.com/actions"),a(e)]),s(" 里面。")]),n("p",null,[s("既然 actions 是代码仓库，当然就有版本的概念，用户可以引用某个具体版本的 action。下面都是合法的 action 引用，用的就是 Git 的指针概念，详见"),n("a",G,[s("官方文档"),a(e)]),s("。")]),A,n("p",null,[s("workflow 文件采用 "),n("a",H,[s("YAML"),a(e)]),s(" 格式，文件名可以任意取，但是后缀名统一为"),E,s("，比如"),M,s("。一个库可以有多个 workflow 文件。GitHub 只要发现"),N,s("目录里面有"),S,s("文件，就会自动运行该文件。")]),n("p",null,[s("workflow 文件的配置字段非常多，详见"),n("a",I,[s("官方文档"),a(e)]),s("。下面是一些基本字段。")]),L,n("p",null,[s("完整的事件列表，请查看"),n("a",C,[s("官方文档"),a(e)]),s("。除了代码库事件，GitHub Actions 也支持外部事件触发，或者定时运行。")]),D,n("p",null,[s("第一步，这个示例需要将构建成果发到 GitHub 仓库，因此需要 GitHub 密钥。按照"),n("a",T,[s("官方文档"),a(e)]),s("，生成一个密钥。然后，将这个密钥储存到当前仓库的"),B,s("里面。")]),O,V,n("p",null,[s("第二步，本地计算机使用"),z,s("，生成一个标准的 vuepress 应用。("),n("a",q,[s("vuepress-theme-reco官网"),a(e)]),s(")")]),P,n("p",null,[s("我们选用一个别人已经写好的 action："),n("a",R,[s("JamesIves/github-pages-deploy-action"),a(e)]),s("，它提供了 workflow 的范例文件，直接拷贝过来就行了。")]),F,n("p",null,[s("GitHub 发现了 workflow 文件以后，就会自动运行。你可以在网站上实时查看"),n("a",J,[s("运行日志"),a(e)]),s("，日志默认保存30天")]),$,n("p",null,[s("等到 workflow 运行结束，访问 "),n("a",K,[s("GitHub Page"),a(e)]),s("，会看到构建成果已经发上网了。")]),Y,W,Q,n("p",null,[n("a",U,[s("阮一峰 GitHub Actions 入门教程"),a(e)])]),n("p",null,[n("a",Z,[s("GitHub Pages 官方文档"),a(e)])]),n("p",null,[n("a",X,[s("Github Actions for web apps"),a(e)]),s(", Luke Boyle")]),n("p",null,[n("a",nn,[s("My First Week With GitHub Actions"),a(e)]),s(", Adam Zolyak")])])}const on=o(d,[["render",sn],["__file","github-actions.html.vue"]]);export{on as default};
