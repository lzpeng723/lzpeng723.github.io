import{_ as n,o as s,c as e,a}from"./app-CTlNizBn.js";const i={},l=a(`<h2 id="ansible-简介" tabindex="-1"><a class="header-anchor" href="#ansible-简介" aria-hidden="true">#</a> ansible 简介</h2><h3 id="ansible-是什么" tabindex="-1"><a class="header-anchor" href="#ansible-是什么" aria-hidden="true">#</a> ansible 是什么？</h3><p>ansible是新出现的自动化运维工具，基于Python开发，集合了众多运维工具（puppet、chef、func、fabric）的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能。 ansible是基于 paramiko 开发的,并且基于模块化工作，本身没有批量部署的能力。真正具有批量部署的是ansible所运行的模块，ansible只是提供一种框架。ansible不需要在远程主机上安装client/agents，因为它们是基于ssh来和远 程主机通讯的。ansible目前已经已经被红帽官方收购，是自动化运维工具中大家认可度最高的，并且上手容易，学习简单。是每位运维工程师必须掌握的技能之一。</p><h3 id="ansible-特点" tabindex="-1"><a class="header-anchor" href="#ansible-特点" aria-hidden="true">#</a> ansible 特点</h3><ol><li>部署简单，只需在主控端部署Ansible环境，被控端无需做任何操作；</li><li>默认使用SSH协议对设备进行管理；</li><li>有大量常规运维操作模块，可实现日常绝大部分操作；</li><li>配置简单、功能强大、扩展性强；</li><li>支持API及自定义模块，可通过Python轻松扩展；</li><li>通过Playbooks来定制强大的配置、状态管理；</li><li>轻量级，无需在客户端安装agent，更新时，只需在操作机上进行一次更新即可；</li><li>提供一个功能强大、操作性强的Web管理界面和REST API接口——AWX平台。</li></ol><h3 id="ansible-架构图" tabindex="-1"><a class="header-anchor" href="#ansible-架构图" aria-hidden="true">#</a> ansible 架构图</h3><p><img src="https://images2017.cnblogs.com/blog/1204916/201712/1204916-20171205163000628-69838828.png" alt="ansible 架构图"></p><p>上图中我们看到的主要模块如下：</p><blockquote><p><code>Ansible</code>：Ansible核心程序。 <code>HostInventory</code>：记录由Ansible管理的主机信息，包括端口、密码、ip等。 <code>Playbooks</code>：“剧本”YAML格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能。 <code>CoreModules</code>：<strong>核心模块</strong>，主要操作是通过调用核心模块来完成管理任务。 <code>CustomModules</code>：自定义模块，完成核心模块无法完成的功能，支持多种语言。 <code>ConnectionPlugins</code>：连接插件，Ansible和Host通信使用</p></blockquote><h2 id="ansible-任务执行" tabindex="-1"><a class="header-anchor" href="#ansible-任务执行" aria-hidden="true">#</a> ansible 任务执行</h2><h3 id="ansible-任务执行模式" tabindex="-1"><a class="header-anchor" href="#ansible-任务执行模式" aria-hidden="true">#</a> ansible 任务执行模式</h3><p>Ansible 系统由控制主机对被管节点的操作方式可分为两类，即<code>adhoc</code>和<code>playbook</code>：</p><ul><li>ad-hoc模式(点对点模式) 使用单个模块，支持批量执行单条命令。ad-hoc 命令是一种可以快速输入的命令，而且不需要保存起来的命令。<strong>就相当于bash中的一句话shell。</strong></li><li>playbook模式(剧本模式) 是Ansible主要管理方式，也是Ansible功能强大的关键所在。<strong>playbook通过多个task集合完成一类功能</strong>，如Web服务的安装部署、数据库服务器的批量备份等。可以简单地把playbook理解为通过组合多条ad-hoc操作的配置文件。</li></ul><h3 id="ansible-执行流程" tabindex="-1"><a class="header-anchor" href="#ansible-执行流程" aria-hidden="true">#</a> ansible 执行流程</h3><p><img src="https://images2017.cnblogs.com/blog/1204916/201712/1204916-20171205162615738-1292598736.png" alt="ansible 执行流程"> 简单理解就是Ansible在运行时， 首先读取<code>ansible.cfg</code>中的配置， 根据规则获取<code>Inventory</code>中的管理主机列表， 并行的在这些主机中执行配置的任务， 最后等待执行返回的结果。</p><h3 id="ansible-命令执行过程" tabindex="-1"><a class="header-anchor" href="#ansible-命令执行过程" aria-hidden="true">#</a> ansible 命令执行过程</h3><ol><li>加载自己的配置文件，默认<code>/etc/ansible/ansible.cfg</code>；</li><li>查找对应的主机配置文件，找到要执行的主机或者组；</li><li>加载自己对应的模块文件，如 command；</li><li>通过ansible将模块或命令生成对应的临时py文件(python脚本)， 并将该文件传输至远程服务器；</li><li>对应执行用户的家目录的<code>.ansible/tmp/XXX/XXX.PY</code>文件；</li><li>给文件 +x 执行权限；</li><li>执行并返回结果；</li><li>删除临时py文件，<code>sleep 0</code>退出；</li></ol><h2 id="ansible-配置详解" tabindex="-1"><a class="header-anchor" href="#ansible-配置详解" aria-hidden="true">#</a> ansible 配置详解</h2><h3 id="ansible-安装方式" tabindex="-1"><a class="header-anchor" href="#ansible-安装方式" aria-hidden="true">#</a> ansible 安装方式</h3><p>ansible安装常用两种方式，<code>yum安装</code>和<code>pip程序安装</code>。下面我们来详细介绍一下这两种安装方式。</p><h4 id="使用-pip-python的包管理模块-安装" tabindex="-1"><a class="header-anchor" href="#使用-pip-python的包管理模块-安装" aria-hidden="true">#</a> 使用 pip（python的包管理模块）安装</h4><p>首先，我们需要安装一个<code>python-pip</code>包，安装完成以后，则直接使用<code>pip</code>命令来安装我们的包，具体操作过程如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum install python-pip
pip install ansible
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-yum-安装" tabindex="-1"><a class="header-anchor" href="#使用-yum-安装" aria-hidden="true">#</a> 使用 yum 安装</h4><p>yum 安装是我们很熟悉的安装方式了。我们需要先安装一个<code>epel-release</code>包，然后再安装我们的 ansible 即可。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yum install epel-release -y
yum install ansible –y
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ansible-程序结构" tabindex="-1"><a class="header-anchor" href="#ansible-程序结构" aria-hidden="true">#</a> ansible 程序结构</h3><p>安装目录如下(yum安装)：</p><ul><li>配置文件目录：<code>/etc/ansible/</code></li><li>执行文件目录：<code>/usr/bin/</code></li><li>Lib库依赖目录：<code>/usr/lib/pythonX.X/site-packages/ansible/</code></li><li>Help文档目录：<code>/usr/share/doc/ansible-X.X.X/</code></li><li>Man文档目录：<code>/usr/share/man/man1/</code></li></ul><h3 id="ansible配置文件查找顺序" tabindex="-1"><a class="header-anchor" href="#ansible配置文件查找顺序" aria-hidden="true">#</a> ansible配置文件查找顺序</h3><p>ansible与我们其他的服务在这一点上有很大不同，这里的配置文件查找是从多个地方找的，顺序如下：</p><ol><li>检查环境变量<code>ANSIBLE_CONFIG</code>指向的路径文件(export ANSIBLE_CONFIG=/etc/ansible.cfg)；</li><li><code>./ansible.cfg</code>，检查当前目录下的ansible.cfg配置文件；</li><li><code>~/ansible.cfg</code>，检查当前用户家目录下的ansible.cfg配置文件；</li><li><code>/etc/ansible/ansible.cfg</code>检查etc目录的配置文件。</li></ol><h3 id="ansible-配置文件" tabindex="-1"><a class="header-anchor" href="#ansible-配置文件" aria-hidden="true">#</a> ansible 配置文件</h3><p>ansible 的配置文件为<code>/etc/ansible/ansible.cfg</code>，ansible 有许多参数，下面我们列出一些常见的参数：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">[</span>defaults<span class="token punctuation">]</span>
<span class="token comment"># 这个参数表示资源清单inventory文件的位置</span>
inventory = /etc/ansible/hosts
<span class="token comment"># 指向存放Ansible模块的目录，支持多个目录方式，只要用冒号（：）隔开就可以</span>
library = /usr/share/ansible
<span class="token comment"># 以什么用户远程被管理主机</span>
remote_user = lzpeng
<span class="token comment"># 是否校验密钥</span>
host_key_checking = False
<span class="token comment"># 并发连接数，默认为5</span>
forks = 5
<span class="token comment"># 设置默认执行命令的用户</span>
sudo_user = root
<span class="token comment"># 使用密钥还是密码远程</span>
ask_pass = True
<span class="token comment">#指定连接被管节点的管理端口，默认为22端口，建议修改，能够更加安全</span>
remote_port = 22
<span class="token comment"># 设置是否检查SSH主机的密钥，值为True/False。关闭后第一次连接不会提示配置实例</span>
host_key_checking = False
<span class="token comment"># 设置SSH连接的超时时间，单位为秒</span>
timeout = 60
<span class="token comment"># 指定一个存储ansible日志的文件（默认不记录日志）</span>
log_path = /var/log/ansible.log

<span class="token punctuation">[</span>privilege_escalation<span class="token punctuation">]</span>
<span class="token comment"># 是否需要切换用户</span>
become = True
<span class="token comment"># 如何切换用户</span>
become_method = sudo
<span class="token comment"># 切换成什么用户</span>
become_user = root
<span class="token comment"># sudo 是否需要输入密码</span>
become_ask_pass = False
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ansible-主机清单" tabindex="-1"><a class="header-anchor" href="#ansible-主机清单" aria-hidden="true">#</a> ansible 主机清单</h3><p>在配置文件中，我们提到了资源清单，这个清单就是我们的主机清单，里面保存的是一些 ansible 需要连接管理的主机列表。我们可以来看看他的定义方式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 添加以下内容</span>
<span class="token punctuation">[</span>test<span class="token punctuation">]</span> <span class="token comment"># 组名</span>
CentOS7<span class="token punctuation">-</span>Node1 ansible_ssh_port=220 <span class="token comment"># 自定义远程ssh端口</span>
<span class="token punctuation">[</span>proxy<span class="token punctuation">]</span>
CentOS7<span class="token punctuation">-</span>Node2 ansible_ssh_user=lzpeng <span class="token comment"># 自定义远程连接的账户名</span>
<span class="token punctuation">[</span>webserver<span class="token punctuation">]</span>
CentOS7<span class="token punctuation">-</span>Node<span class="token punctuation">[</span>3<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> ansible_ssh_pass=123456 <span class="token comment"># 自定义远程连接的账户名</span>
<span class="token punctuation">[</span>database<span class="token punctuation">]</span>
CentOS7<span class="token punctuation">-</span>Node5 ansible_ssh_private_key_file=220 <span class="token comment"># 自定义远程连接的账户名</span>
<span class="token punctuation">[</span>cluster<span class="token punctuation">:</span>children<span class="token punctuation">]</span> <span class="token comment"># 嵌套组</span>
webserver
database
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，这里的组成员可以使用通配符来匹配，这样对于一些标准化的管理来说就很轻松方便了。</p><p>我们可以根据实际情况来配置我们的主机列表，具体操作如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> ~/ansible/hosts

<span class="token comment"># 添加以下内容</span>
<span class="token punctuation">[</span>test<span class="token punctuation">]</span> <span class="token comment"># 组名</span>
CentOS7-Node1 <span class="token comment"># 主机名</span>
<span class="token punctuation">[</span>proxy<span class="token punctuation">]</span>
CentOS7-Node2
<span class="token punctuation">[</span>webserver<span class="token punctuation">]</span>
CentOS7-Node<span class="token punctuation">[</span><span class="token number">3</span>:4<span class="token punctuation">]</span> <span class="token comment"># 连续主机名</span>
<span class="token punctuation">[</span>database<span class="token punctuation">]</span>
CentOS7-Node5
<span class="token punctuation">[</span>cluster:children<span class="token punctuation">]</span> <span class="token comment"># 嵌套组</span>
webserver
database
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ansible-常用命令" tabindex="-1"><a class="header-anchor" href="#ansible-常用命令" aria-hidden="true">#</a> ansible 常用命令</h2><h3 id="ansible-命令集" tabindex="-1"><a class="header-anchor" href="#ansible-命令集" aria-hidden="true">#</a> ansible 命令集</h3><blockquote><p><code>/usr/bin/ansible</code>　　Ansibe AD-Hoc 临时命令执行工具，常用于临时命令的执行 <code>/usr/bin/ansible-doc</code> 　Ansible 模块功能查看工具 <code>/usr/bin/ansible-galaxy</code>　　下载/上传优秀代码或Roles模块 的官网平台，基于网络的 <code>/usr/bin/ansible-playbook</code>　　Ansible 定制自动化的任务集编排工具 <code>/usr/bin/ansible-pull</code>　　Ansible远程执行命令的工具，拉取配置而非推送配置（使用较少，海量机器时使用，对运维的架构能力要求较高） <code>/usr/bin/ansible-vault</code>　　Ansible 文件加密工具 <code>/usr/bin/ansible-console</code>　　Ansible基于Linux Consoble界面可与用户交互的命令执行工具</p></blockquote><p>其中，我们比较常用的是<code>/usr/bin/ansible</code>和<code>/usr/bin/ansible-playbook</code>。</p><h3 id="ansible-doc-命令" tabindex="-1"><a class="header-anchor" href="#ansible-doc-命令" aria-hidden="true">#</a> ansible-doc 命令</h3><p>ansible-doc 命令常用于获取模块信息及其使用帮助，一般用法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible-doc <span class="token parameter variable">-l</span>				<span class="token comment">#获取全部模块的信息</span>
ansible-doc <span class="token parameter variable">-s</span> MOD_NAME		<span class="token comment">#获取指定模块的使用帮助</span>
ansible-doc <span class="token parameter variable">-s</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span>		<span class="token comment">#统计有多少模块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以查看一下ansible-doc的全部用法：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible-doc
Usage: ansible-doc <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>module<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

Options:
  -h, <span class="token parameter variable">--help</span>            show this <span class="token builtin class-name">help</span> message and <span class="token builtin class-name">exit</span>　　<span class="token comment"># 显示命令参数API文档</span>
  -l, <span class="token parameter variable">--list</span>            List available modules　　<span class="token comment">#列出可用的模块</span>
  <span class="token parameter variable">-M</span> MODULE_PATH, --module-path<span class="token operator">=</span>MODULE_PATH　　<span class="token comment">#指定模块的路径</span>
                        specify path<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to module library <span class="token punctuation">(</span>default<span class="token operator">=</span>None<span class="token punctuation">)</span>
  -s, <span class="token parameter variable">--snippet</span>         Show playbook snippet <span class="token keyword">for</span> specified module<span class="token punctuation">(</span>s<span class="token punctuation">)</span>　　<span class="token comment">#显示playbook制定模块的用法</span>
  -v, <span class="token parameter variable">--verbose</span>         verbose mode <span class="token punctuation">(</span>-vvv <span class="token keyword">for</span> more, <span class="token parameter variable">-vvvv</span> to <span class="token builtin class-name">enable</span>　　<span class="token comment"># 显示ansible-doc的版本号查看模块列表：</span>
                        connection debugging<span class="token punctuation">)</span>
  <span class="token parameter variable">--version</span>             show program&#39;s version number and <span class="token builtin class-name">exit</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以来看一下，以yum相关的为例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible-doc <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">grep</span> yum

yum                                                           Manages packages with the \`yum&#39; package manager                                                      
yum_repository                                                Add or remove YUM repositories      
ansible-doc <span class="token parameter variable">-s</span> yum
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ansible-命令详解" tabindex="-1"><a class="header-anchor" href="#ansible-命令详解" aria-hidden="true">#</a> ansible 命令详解</h3><p>命令的具体格式如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token operator">&lt;</span>host-pattern<span class="token operator">&gt;</span> <span class="token punctuation">[</span>-f forks<span class="token punctuation">]</span> <span class="token punctuation">[</span>-m module_name<span class="token punctuation">]</span> <span class="token punctuation">[</span>-a args<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也可以通过<code>ansible -h</code>来查看帮助，下面我们列出一些比较常用的选项，并解释其含义：</p><blockquote><p><code>-a MODULE_ARGS</code>　　　#模块的参数，如果执行默认COMMAND的模块，即是命令参数，如： “date”，“pwd”等等 <code>-k</code>，<code>--ask-pass</code> #ask for SSH password。登录密码，提示输入SSH密码而不是假设基于密钥的验证 <code>--ask-su-pass</code> #ask for su password。su切换密码 <code>-K</code>，<code>--ask-sudo-pass</code> #ask for sudo password。提示密码使用sudo，sudo表示提权操作 <code>--ask-vault-pass</code> #ask for vault password。假设我们设定了加密的密码，则用该选项进行访问 <code>-B SECONDS</code> #后台运行超时时间 <code>-C</code> #模拟运行环境并进行预运行，可以进行查错测试 <code>-c CONNECTION</code> #连接类型使用 <code>-f FORKS</code> #并行任务数，默认为5 <code>-i INVENTORY</code> #指定主机清单的路径，默认为<code>/etc/ansible/hosts</code><code>--list-hosts</code> #查看有哪些主机组 <code>-m MODULE_NAME</code> #执行模块的名字，默认使用 command 模块，所以如果是只执行单一命令可以不用 -m参数 <code>-o</code> #压缩输出，尝试将所有结果在一行输出，一般针对收集工具使用 <code>-S</code> #用 su 命令 <code>-R SU_USER</code> #指定 su 的用户，默认为 root 用户 <code>-s</code> #用 sudo 命令 <code>-U SUDO_USER</code> #指定 sudo 到哪个用户，默认为 root 用户 <code>-T TIMEOUT</code> #指定 ssh 默认超时时间，默认为10s，也可在配置文件中修改 <code>-u REMOTE_USER</code> #远程用户，默认为 root 用户 <code>-v</code> #查看详细信息，同时支持<code>-vvv</code>，<code>-vvvv</code>可查看更详细信息</p></blockquote><h3 id="ansible-配置公私钥" tabindex="-1"><a class="header-anchor" href="#ansible-配置公私钥" aria-hidden="true">#</a> ansible 配置公私钥</h3><p>上面我们已经提到过 ansible 是基于 ssh 协议实现的，所以其配置公私钥的方式与 ssh 协议的方式相同，具体操作步骤如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 1.生成私钥</span>
ssh-keygen <span class="token parameter variable">-f</span> ~/.ssh/id_rsa <span class="token parameter variable">-N</span> <span class="token string">&#39;&#39;</span>
<span class="token comment"># 2.向主机分发私钥</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> CentOS7-Node1 CentOS7-Node2 CentOS7-Node3 CentOS7-Node4 CentOS7-Node5
<span class="token keyword">do</span>
    ssh-copy-id <span class="token variable">$i</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的话，就可以实现无密码登录，我们的实验过程也会顺畅很多。 注意，如果出现了一下报错：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-bash: ssh-copy-id: command not found
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么就证明我们需要安装一个包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> openssh-clientsansible
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把包安装上即可。</p>`,65),c=[l];function o(d,t){return s(),e("div",null,c)}const r=n(i,[["render",o],["__file","ansible-install.html.vue"]]);export{r as default};
