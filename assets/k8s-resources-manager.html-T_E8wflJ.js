import{_ as s,r as l,o as d,c as i,b as t,d as e,e as a,a as p}from"./app-CTlNizBn.js";const c="/assets/image-20200406225334627-7ff3xOuG.png",r={},o={href:"https://gitee.com/yooome/golang/blob/main/k8s%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/Kubernetes%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B.md#3-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86",target:"_blank",rel:"noopener noreferrer"},u={href:"https://www.bilibili.com/video/BV1Qv41167ck?p=12",target:"_blank",rel:"noopener noreferrer"},v=p('<h1 id="_4-资源管理" tabindex="-1"><a class="header-anchor" href="#_4-资源管理" aria-hidden="true">#</a> 4. 资源管理</h1><h2 id="_3-1-资源管理介绍" tabindex="-1"><a class="header-anchor" href="#_3-1-资源管理介绍" aria-hidden="true">#</a> 3.1 资源管理介绍</h2><p>在kubernetes中，所有的内容都抽象为资源，用户需要通过操作资源来管理kubernetes。</p><blockquote><p>kubernetes的本质上就是一个集群系统，用户可以在集群中部署各种服务，所谓的部署服务，其实就是在kubernetes集群中运行一个个的容器，并将指定的程序跑在容器中。</p><p>kubernetes的最小管理单元是pod而不是容器，所以只能将容器放在<code>Pod</code>中，而kubernetes一般也不会直接管理Pod，而是通过<code>Pod控制器</code>来管理Pod的。</p><p>Pod可以提供服务之后，就要考虑如何访问Pod中服务，kubernetes提供了<code>Service</code>资源实现这个功能。</p><p>当然，如果Pod中程序的数据需要持久化，kubernetes还提供了各种<code>存储</code>系统。</p></blockquote><p><img src="'+c+`" alt="image-20200406225334627"></p><blockquote><p>学习kubernetes的核心，就是学习如何对集群上的<code>Pod、Pod控制器、Service、存储</code>等各种资源进行操作</p></blockquote><h2 id="_3-2-yaml语言介绍" tabindex="-1"><a class="header-anchor" href="#_3-2-yaml语言介绍" aria-hidden="true">#</a> 3.2 YAML语言介绍</h2><p>YAML是一个类似 XML、JSON 的标记性语言。它强调以<strong>数据</strong>为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称&quot;一种人性化的数据格式语言&quot;。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>heima</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>age</span><span class="token punctuation">&gt;</span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>age</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>address</span><span class="token punctuation">&gt;</span></span>Beijing<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>address</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>heima</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">heima</span><span class="token punctuation">:</span>
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">15</span>
  <span class="token key atrule">address</span><span class="token punctuation">:</span> Beijing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>YAML的语法比较简单，主要有下面几个：</p><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进不允许使用tab，只允许空格( 低版本限制 )</li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可</li><li>&#39;#&#39;表示注释</li></ul><p>YAML支持以下几种数据类型：</p><ul><li>纯量：单个的、不可再分的值</li><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li></ul><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期</span>
<span class="token comment"># 1 布尔类型</span>
<span class="token key atrule">c1</span><span class="token punctuation">:</span> true (或者True)
<span class="token comment"># 2 整型</span>
<span class="token key atrule">c2</span><span class="token punctuation">:</span> <span class="token number">234</span>
<span class="token comment"># 3 浮点型</span>
<span class="token key atrule">c3</span><span class="token punctuation">:</span> <span class="token number">3.14</span>
<span class="token comment"># 4 null类型 </span>
<span class="token key atrule">c4</span><span class="token punctuation">:</span> <span class="token null important">~</span>  <span class="token comment"># 使用~表示null</span>
<span class="token comment"># 5 日期类型</span>
<span class="token key atrule">c5</span><span class="token punctuation">:</span> <span class="token datetime number">2018-02-17</span>    <span class="token comment"># 日期必须使用ISO 8601格式，即yyyy-MM-dd</span>
<span class="token comment"># 6 时间类型</span>
<span class="token key atrule">c6</span><span class="token punctuation">:</span> <span class="token datetime number">2018-02-17T15:02:31+08:00</span>  <span class="token comment"># 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span>
<span class="token comment"># 7 字符串类型</span>
<span class="token key atrule">c7</span><span class="token punctuation">:</span> heima     <span class="token comment"># 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 </span>
<span class="token key atrule">c8</span><span class="token punctuation">:</span> line1
    line2     <span class="token comment"># 字符串过多的情况可以拆成多行，每一行会被转化成一个空格</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token comment"># 对象</span>
<span class="token comment"># 形式一(推荐):</span>
<span class="token key atrule">heima</span><span class="token punctuation">:</span>
  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">15</span>
  <span class="token key atrule">address</span><span class="token punctuation">:</span> Beijing
<span class="token punctuation">---</span>
<span class="token comment"># 形式二(了解):</span>
<span class="token key atrule">heima</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span><span class="token key atrule">address</span><span class="token punctuation">:</span> Beijing<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 数组</span>
<span class="token punctuation">---</span>
<span class="token comment"># 形式一(推荐):</span>
<span class="token key atrule">address</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> 顺义
  <span class="token punctuation">-</span> 昌平
<span class="token punctuation">---</span>
<span class="token comment"># 形式二(了解):</span>
<span class="token key atrule">address</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>顺义<span class="token punctuation">,</span>昌平<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>小提示：</p><p>1 书写yaml切记<code>:</code> 后面要加一个空格</p><p>2 如果需要将多段yaml配置放在一个文件中，中间要使用<code>---</code>分隔</p><p>3 下面是一个yaml转json的网站，可以通过它验证yaml是否书写正确</p><p>https://www.json2yaml.com/convert-yaml-to-json</p></blockquote><h2 id="_3-3-资源管理方式" tabindex="-1"><a class="header-anchor" href="#_3-3-资源管理方式" aria-hidden="true">#</a> 3.3 资源管理方式</h2><ul><li><p>命令式对象管理：直接使用命令去操作kubernetes资源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl run nginx-pod <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx:1.17.1 <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>命令式对象配置：通过命令配置和配置文件去操作kubernetes资源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create/patch <span class="token parameter variable">-f</span> nginx-pod.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>声明式对象配置：通过apply命令和配置文件去操作kubernetes资源, apply 等于 创建或更新</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl apply <span class="token parameter variable">-f</span> nginx-pod.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">操作对象</th><th style="text-align:left;">适用环境</th><th style="text-align:left;">优点</th><th style="text-align:left;">缺点</th></tr></thead><tbody><tr><td style="text-align:left;">命令式对象管理</td><td style="text-align:left;">对象</td><td style="text-align:left;">测试</td><td style="text-align:left;">简单</td><td style="text-align:left;">只能操作活动对象，无法审计、跟踪</td></tr><tr><td style="text-align:left;">命令式对象配置</td><td style="text-align:left;">文件</td><td style="text-align:left;">开发</td><td style="text-align:left;">可以审计、跟踪</td><td style="text-align:left;">项目大时，配置文件多，操作麻烦</td></tr><tr><td style="text-align:left;">声明式对象配置</td><td style="text-align:left;">目录</td><td style="text-align:left;">开发</td><td style="text-align:left;">支持目录操作</td><td style="text-align:left;">意外情况下难以调试</td></tr></tbody></table><h3 id="_3-3-1-命令式对象管理" tabindex="-1"><a class="header-anchor" href="#_3-3-1-命令式对象管理" aria-hidden="true">#</a> 3.3.1 命令式对象管理</h3><p><strong>kubectl命令</strong></p><p>kubectl是kubernetes集群的命令行工具，通过它能够对集群本身进行管理，并能够在集群上进行容器化应用的安装部署。kubectl命令的语法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token punctuation">[</span>command<span class="token punctuation">]</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token punctuation">[</span>flags<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>comand</strong>：指定要对资源执行的操作，例如create、get、delete</p><p><strong>type</strong>：指定资源类型，比如deployment、pod、service</p><p><strong>name</strong>：指定资源的名称，名称大小写敏感</p><p><strong>flags</strong>：指定额外的可选参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看所有pod</span>
kubectl get pod 

<span class="token comment"># 查看某个pod</span>
kubectl get pod pod_name

kubectl get pod pod_name <span class="token parameter variable">-o</span> wide
kubectl get pod pod_name <span class="token parameter variable">-o</span> json
kubectl get pod pod_name <span class="token parameter variable">-o</span> yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>资源类型</strong></p><p>kubernetes中所有的内容都抽象为资源，可以通过下面的命令进行查看:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl api-resources
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经常使用的资源有下面这些：</p><table><thead><tr><th style="text-align:left;">资源分类</th><th style="text-align:left;">资源名称</th><th style="text-align:left;">缩写</th><th style="text-align:left;">资源作用</th></tr></thead><tbody><tr><td style="text-align:left;">集群级别资源</td><td style="text-align:left;">nodes</td><td style="text-align:left;">no</td><td style="text-align:left;">集群组成部分</td></tr><tr><td style="text-align:left;">namespaces</td><td style="text-align:left;">ns</td><td style="text-align:left;">隔离Pod</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">pod资源</td><td style="text-align:left;">pods</td><td style="text-align:left;">po</td><td style="text-align:left;">装载容器</td></tr><tr><td style="text-align:left;">pod资源控制器</td><td style="text-align:left;">replicationcontrollers</td><td style="text-align:left;">rc</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">replicasets</td><td style="text-align:left;">rs</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">deployments</td><td style="text-align:left;">deploy</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">daemonsets</td><td style="text-align:left;">ds</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">jobs</td><td style="text-align:left;"></td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">cronjobs</td><td style="text-align:left;">cj</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">horizontalpodautoscalers</td><td style="text-align:left;">hpa</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">statefulsets</td><td style="text-align:left;">sts</td><td style="text-align:left;">控制pod资源</td></tr><tr><td style="text-align:left;">服务发现资源</td><td style="text-align:left;">services</td><td style="text-align:left;">svc</td><td style="text-align:left;">统一pod对外接口</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ingress</td><td style="text-align:left;">ing</td><td style="text-align:left;">统一pod对外接口</td></tr><tr><td style="text-align:left;">存储资源</td><td style="text-align:left;">volumeattachments</td><td style="text-align:left;"></td><td style="text-align:left;">存储</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">persistentvolumes</td><td style="text-align:left;">pv</td><td style="text-align:left;">存储</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">persistentvolumeclaims</td><td style="text-align:left;">pvc</td><td style="text-align:left;">存储</td></tr><tr><td style="text-align:left;">配置资源</td><td style="text-align:left;">configmaps</td><td style="text-align:left;">cm</td><td style="text-align:left;">配置</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">secrets</td><td style="text-align:left;"></td><td style="text-align:left;">配置</td></tr></tbody></table><p><strong>操作</strong></p><p>kubernetes允许对资源进行多种操作，可以通过--help查看详细的操作命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>经常使用的操作有下面这些：</p><table><thead><tr><th style="text-align:left;">命令分类</th><th style="text-align:left;">命令</th><th style="text-align:left;">翻译</th><th style="text-align:left;">命令作用</th></tr></thead><tbody><tr><td style="text-align:left;">基本命令</td><td style="text-align:left;">create</td><td style="text-align:left;">创建</td><td style="text-align:left;">创建一个资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">edit</td><td style="text-align:left;">编辑</td><td style="text-align:left;">编辑一个资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">get</td><td style="text-align:left;">获取</td><td style="text-align:left;">获取一个资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">patch</td><td style="text-align:left;">更新</td><td style="text-align:left;">更新一个资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">delete</td><td style="text-align:left;">删除</td><td style="text-align:left;">删除一个资源</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">explain</td><td style="text-align:left;">解释</td><td style="text-align:left;">展示资源文档</td></tr><tr><td style="text-align:left;">运行和调试</td><td style="text-align:left;">run</td><td style="text-align:left;">运行</td><td style="text-align:left;">在集群中运行一个指定的镜像</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">expose</td><td style="text-align:left;">暴露</td><td style="text-align:left;">暴露资源为Service</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">describe</td><td style="text-align:left;">描述</td><td style="text-align:left;">显示资源内部信息</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">logs</td><td style="text-align:left;">日志输出容器在 pod 中的日志</td><td style="text-align:left;">输出容器在 pod 中的日志</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">attach</td><td style="text-align:left;">缠绕进入运行中的容器</td><td style="text-align:left;">进入运行中的容器</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">exec</td><td style="text-align:left;">执行容器中的一个命令</td><td style="text-align:left;">执行容器中的一个命令</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">cp</td><td style="text-align:left;">复制</td><td style="text-align:left;">在Pod内外复制文件</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">rollout</td><td style="text-align:left;">首次展示</td><td style="text-align:left;">管理资源的发布</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">scale</td><td style="text-align:left;">规模</td><td style="text-align:left;">扩(缩)容Pod的数量</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">autoscale</td><td style="text-align:left;">自动调整</td><td style="text-align:left;">自动调整Pod的数量</td></tr><tr><td style="text-align:left;">高级命令</td><td style="text-align:left;">apply</td><td style="text-align:left;">rc</td><td style="text-align:left;">通过文件对资源进行配置</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">label</td><td style="text-align:left;">标签</td><td style="text-align:left;">更新资源上的标签</td></tr><tr><td style="text-align:left;">其他命令</td><td style="text-align:left;">cluster-info</td><td style="text-align:left;">集群信息</td><td style="text-align:left;">显示集群信息</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">version</td><td style="text-align:left;">版本</td><td style="text-align:left;">显示当前Server和Client的版本</td></tr></tbody></table><p>下面以一个namespace / pod的创建和删除简单演示下命令的使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建一个namespace</span>
kubectl create namespace dev

namespace/dev created

<span class="token comment"># 获取namespace</span>
kubectl get ns

NAME              STATUS   AGE
default           Active   5h1m
dev               Active   15s
kube-node-lease   Active   5h1m
kube-public       Active   5h1m
kube-system       Active   5h1m

<span class="token comment"># 在此namespace下创建并运行一个nginx的Pod</span>
kubectl run pod <span class="token parameter variable">--image</span><span class="token operator">=</span>nginx:latest <span class="token parameter variable">-n</span> dev

pod/pod created

<span class="token comment"># 查看新创建的pod</span>
kubectl get pod <span class="token parameter variable">-n</span> dev

NAME  READY   STATUS    RESTARTS   AGE
pod   <span class="token number">1</span>/1     Running   <span class="token number">0</span>          21s

<span class="token comment"># 删除指定的pod</span>
kubectl delete pod pod <span class="token parameter variable">-n</span> dev

pod <span class="token string">&quot;pod&quot;</span> deleted

<span class="token comment"># 删除指定的namespace</span>
kubectl delete ns dev

namespace <span class="token string">&quot;dev&quot;</span> deleted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-2-命令式对象配置" tabindex="-1"><a class="header-anchor" href="#_3-3-2-命令式对象配置" aria-hidden="true">#</a> 3.3.2 命令式对象配置</h3><p>命令式对象配置就是使用命令配合配置文件一起来操作kubernetes资源。</p><p>1） 创建一个nginx-pod.yaml，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Namespace
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> dev
<span class="token punctuation">---</span>
<span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1
<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod
<span class="token key atrule">metadata</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>pod
  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> dev
<span class="token key atrule">spec</span><span class="token punctuation">:</span>
  <span class="token key atrule">containers</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>containers
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2）执行create命令，创建资源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl create <span class="token parameter variable">-f</span> nginx-pod.yaml

namespace/dev created
pod/nginx-pod created
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时发现创建了两个资源对象，分别是namespace和pod</p><p>3）执行get命令，查看资源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl get <span class="token parameter variable">-f</span> nginx-pod.yaml

NAME            STATUS   AGE
namespace/dev   Active   18s

NAME            READY   STATUS    RESTARTS   AGE
pod/nginx-pod    <span class="token number">1</span>/1     Running   <span class="token number">0</span>          17s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就显示了两个资源对象的信息</p><p>4）执行delete命令，删除资源：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>kubectl delete <span class="token parameter variable">-f</span> nginx-pod.yaml

namespace <span class="token string">&quot;dev&quot;</span> deleted
pod <span class="token string">&quot;nginx-pod&quot;</span> deleted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时发现两个资源对象被删除了</p><blockquote><p>总结: 命令式对象配置的方式操作资源，可以简单的认为：命令 + yaml配置文件（里面是命令需要的各种参数）</p></blockquote><h3 id="_3-3-3-声明式对象配置" tabindex="-1"><a class="header-anchor" href="#_3-3-3-声明式对象配置" aria-hidden="true">#</a> 3.3.3 声明式对象配置</h3><p>声明式对象配置跟命令式对象配置很相似，但是它只有一个命令apply。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 首先执行一次kubectl apply -f yaml文件，发现创建了资源</span>
kubectl apply <span class="token parameter variable">-f</span> nginx-pod.yaml

namespace/dev created
pod/nginx-pod created

<span class="token comment"># 再次执行一次kubectl apply -f yaml文件，发现说资源没有变动</span>
kubectl apply <span class="token parameter variable">-f</span> nginx-pod.yaml

namespace/dev unchanged
pod/nginx-pod unchanged
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>总结: 其实声明式对象配置就是使用apply描述一个资源最终的状态（在yaml中定义状态） 使用apply操作资源： 如果资源不存在，就创建，相当于 <code>kubectl create</code> 如果资源已存在，就更新，相当于 <code>kubectl patch</code></p></blockquote><h2 id="扩展-kubectl可以在node节点上运行吗" tabindex="-1"><a class="header-anchor" href="#扩展-kubectl可以在node节点上运行吗" aria-hidden="true">#</a> 扩展：kubectl可以在node节点上运行吗 ?</h2><p>kubectl的运行是需要进行配置的，它的配置文件是<code>$HOME/.kube</code>，如果想要在node节点运行此命令，需要将master上的.kube文件复制到node节点上，即在master节点上执行下面操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span>  <span class="token parameter variable">-r</span>  <span class="token environment constant">HOME</span>/.kube   node1: <span class="token environment constant">HOME</span>/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用推荐: 三种方式应该怎么用 ?</p><blockquote><p>创建/更新资源 使用声明式对象配置 kubectl apply -f XXX.yaml</p><p>删除资源 使用命令式对象配置 kubectl delete -f XXX.yaml</p><p>查询资源 使用命令式对象管理 kubectl get(describe) 资源名称</p></blockquote>`,65);function m(g,b){const n=l("ExternalLinkIcon");return d(),i("div",null,[t("p",null,[t("a",o,[e("原文链接"),a(n)]),e(),t("a",u,[e("视频教程"),a(n)])]),v])}const y=s(r,[["render",m],["__file","k8s-resources-manager.html.vue"]]);export{y as default};
