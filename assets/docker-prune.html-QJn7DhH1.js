import{_ as e,o as r,c as o,a as d}from"./app-Alqy9ioH.js";const c={},n=d(`<h1 id="docker-清理" tabindex="-1"><a class="header-anchor" href="#docker-清理" aria-hidden="true">#</a> Docker 清理</h1><h2 id="容器清理" tabindex="-1"><a class="header-anchor" href="#容器清理" aria-hidden="true">#</a> 容器清理</h2><ul><li><code>docker container prune</code> : 仅删除停止运行的容器。</li><li><code>docker rm -f $(docker ps -aq)</code> : 删除所有容器（包括停止的、正在运行的）。</li><li><code>docker container rm -f $(docker container ls -aq)</code> : 同上。</li></ul><h2 id="镜像清理" tabindex="-1"><a class="header-anchor" href="#镜像清理" aria-hidden="true">#</a> 镜像清理</h2><p><code>docker rmi &lt;image id&gt;</code> ：通过镜像的id来删除指定镜像。</p><p>有一些镜像是隐形的：</p><ul><li>子镜像，就是被其他镜像引用的中间镜像，不能被删除。</li><li>悬挂状态的镜像，就是不会再被使用的镜像，可以被删除。</li></ul><p>其他命令：</p><ul><li><code>docker image ls -f dangling=true</code> : 可以列出所有悬挂状态的镜像 并使用命令 <code>docker image rm $(docker image ls -f dangling=true -q)</code> 或 <code>docker image prune</code>进行删除。</li><li><code>docker image rm $(docker image ls -q)</code> ：删除所有镜像。但正在被容器使用的镜像无法删除。</li></ul><h2 id="数据卷清理" tabindex="-1"><a class="header-anchor" href="#数据卷清理" aria-hidden="true">#</a> 数据卷清理</h2><ul><li><code>docker volume rm $(docker volume ls -q)</code> ：删除不再使用的数据卷。</li><li><code>docker volume prune</code> ：同上。</li></ul><h2 id="缓存清理" tabindex="-1"><a class="header-anchor" href="#缓存清理" aria-hidden="true">#</a> 缓存清理</h2><p><strong>Docker 18.09</strong> 引入了 <strong>BuildKit</strong> ，提升了构建过程的性能、安全、存储管理等能力。</p><p><code>docker builder prune</code> ：删除 build cache。</p><h2 id="一键清理" tabindex="-1"><a class="header-anchor" href="#一键清理" aria-hidden="true">#</a> 一键清理</h2><p><code>docker system df</code> 命令，类似于 <strong>Linux</strong>上的 <code>df</code> 命令，用于查看 <strong>Docker</strong> 的磁盘使用情况：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker system df
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>TYPE</strong>列出了 <strong>Docker</strong> 使用磁盘的 <strong>4</strong> 种类型：</p><ul><li><strong>Images</strong> ：所有镜像占用的空间，包括拉取下来的镜像，和本地构建的。</li><li><strong>Containers</strong> ：运行的容器占用的空间，表示每个容器的读写层的空间。</li><li><strong>Local Volumes</strong> ：容器挂载本地数据卷的空间。</li><li><strong>Build Cache</strong> ：镜像构建过程中产生的缓存空间（只有在使用 <strong>BuildKit</strong> 时才有，<strong>Docker 18.09</strong> 以后可用）。</li></ul><p>最后的 <strong>RECLAIMABLE</strong> 是可回收大小。</p><ul><li><code>docker system prune</code> : 可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及 <strong>dangling</strong> 镜像（即无 <strong>tag</strong> 的镜像）。</li><li><code>docker system prune -a</code> : 清理得更加彻底，可以将没有容器使用 <strong>Docker</strong>镜像都删掉。 注意，这两个命令会把你暂时关闭的容器，以及暂时没有用到的 <strong>Docker</strong> 镜像都删掉了。</li></ul><p>定期清理没用的数据，是个好习惯！</p>`,22),i=[n];function a(t,s){return r(),o("div",null,i)}const g=e(c,[["render",a],["__file","docker-prune.html.vue"]]);export{g as default};
