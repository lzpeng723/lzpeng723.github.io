import{_ as c,r as i,o as l,c as r,b as e,d as n,e as s,w as d,a as o}from"./app-CTlNizBn.js";const p={},u=o('<h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker Compose</h1><p>Compose 简介 Compose 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YML 文件来配置应用程序需要的所有服务。然后，使用一个命令，就可以从 YML 文件配置中创建并启动所有服务。</p><p>Compose 使用的三个步骤：</p><ul><li>使用 Dockerfile 定义应用程序的环境。</li><li>使用 <code>docker-compose.yml</code> 定义构成应用程序的服务，这样它们可以在隔离环境中一起运行。</li><li>最后，执行 <code>docker-compose up</code> 命令来启动并运行整个应用程序。</li></ul><h2 id="安装-docker-compose" tabindex="-1"><a class="header-anchor" href="#安装-docker-compose" aria-hidden="true">#</a> 安装 Docker Compose</h2><h3 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h3><h4 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h4>',7),m={href:"https://github.com/docker/compose/releases",target:"_blank",rel:"noopener noreferrer"},k=e("div",{class:"language-text line-numbers-mode","data-ext":"text"},[e("pre",{class:"language-text"},[e("code",null,`sudo curl -L "https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
`)]),e("div",{class:"line-numbers","aria-hidden":"true"},[e("div",{class:"line-number"})])],-1),v={href:"https://docs.docker.com/compose/install/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://get.daocloud.io/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"},x=o('<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-L</span> https://get.daocloud.io/docker/compose/releases/download/v2.0.0/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token operator">&gt;</span> /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>你可以通过修改URL中的版本，可以自定义您的需要的版本</p><h4 id="将可执行权限应用于二进制文件" tabindex="-1"><a class="header-anchor" href="#将可执行权限应用于二进制文件" aria-hidden="true">#</a> 将可执行权限应用于二进制文件：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chmod +x /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="创建软链" tabindex="-1"><a class="header-anchor" href="#创建软链" aria-hidden="true">#</a> 创建软链：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="测试是否安装成功" tabindex="-1"><a class="header-anchor" href="#测试是否安装成功" aria-hidden="true">#</a> 测试是否安装成功：</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose --version\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意： 对于 alpine，需要以下依赖包： py-pip，python-dev，libffi-dev，openssl-dev，gcc，libc-dev，和 make。</p><h3 id="macos" tabindex="-1"><a class="header-anchor" href="#macos" aria-hidden="true">#</a> macOS</h3><p>Mac 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Mac 用户不需要单独安装 Compose。Docker 安装说明可以参阅 MacOS Docker 安装。</p><h3 id="windows-pc" tabindex="-1"><a class="header-anchor" href="#windows-pc" aria-hidden="true">#</a> windows PC</h3>',12),g=e("h2",{id:"使用",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用","aria-hidden":"true"},"#"),n(" 使用")],-1),_={href:"https://docs.docker.com/compose/gettingstarted/",target:"_blank",rel:"noopener noreferrer"},f=o(`<h3 id="_1、准备" tabindex="-1"><a class="header-anchor" href="#_1、准备" aria-hidden="true">#</a> 1、准备</h3><p>创建一个测试目录：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir composetest
cd composetest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在测试目录中创建一个名为 app.py 的文件，并复制粘贴以下内容：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">import</span> redis
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask_cors <span class="token keyword">import</span> CORS

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
CORS<span class="token punctuation">(</span>app<span class="token punctuation">,</span> supports_credentials<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
cache <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">&#39;redis&#39;</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">6379</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_hit_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    retries <span class="token operator">=</span> <span class="token number">5</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">&#39;hits&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> exc<span class="token punctuation">:</span>
            <span class="token keyword">if</span> retries <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> exc
            retries <span class="token operator">-=</span> <span class="token number">1</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> get_hit_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token string">&#39;Hello World! I have been seen {} times.\\n&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此示例中，redis 是应用程序网络上的 redis 容器的主机名，该主机使用的端口为 6379。 在 composetest 目录中创建另一个名为 requirements.txt 的文件，内容如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>flask
flask_cors
redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、创建-dockerfile-文件" tabindex="-1"><a class="header-anchor" href="#_2、创建-dockerfile-文件" aria-hidden="true">#</a> 2、创建 Dockerfile 文件</h3><p>在 composetest 目录中，创建一个名为 Dockerfile 的文件，内容如下：</p><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile"><pre class="language-Dockerfile"><code>FROM python:3.7-alpine
WORKDIR /code
ENV FLASK_APP app.py
ENV FLASK_RUN_HOST 0.0.0.0
RUN apk add --no-cache gcc musl-dev linux-headers
COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
COPY . .
CMD [&quot;flask&quot;, &quot;run&quot;]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dockerfile 内容解释：</p><ul><li>FROM python:3.7-alpine: 从 Python 3.7 映像开始构建镜像。</li><li>WORKDIR /code: 将工作目录设置为 /code。</li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>ENV FLASK_APP app.py
ENV FLASK_RUN_HOST 0.0.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>设置 flask 命令使用的环境变量。</li><li>RUN apk add --no-cache gcc musl-dev linux-headers: 安装 gcc，以便诸如 MarkupSafe 和 SQLAlchemy 之类的 Python 包可以编译加速。</li><li><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>COPY requirements.txt requirements.txt
RUN pip install -r requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>复制 requirements.txt 并安装 Python 依赖项。</li><li>COPY . .: 将 . 项目中的当前目录复制到 . 镜像中的工作目录。</li><li>CMD [&quot;flask&quot;, &quot;run&quot;]: 容器提供默认的执行命令为：flask run。</li></ul><h3 id="_3、创建-docker-compose-yml" tabindex="-1"><a class="header-anchor" href="#_3、创建-docker-compose-yml" aria-hidden="true">#</a> 3、创建 docker-compose.yml</h3><p>在测试目录中创建一个名为 docker-compose.yml 的文件，然后粘贴以下内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># yaml 配置</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.9&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">build</span><span class="token punctuation">:</span> .
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
     <span class="token punctuation">-</span> <span class="token string">&quot;5000:5000&quot;</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token string">&quot;redis:alpine&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该 Compose 文件定义了两个服务：web 和 redis。</p><ul><li>web：该 web 服务使用从 Dockerfile 当前目录中构建的镜像。然后，它将容器和主机绑定到暴露的端口 5000。此示例服务使用 Flask Web 服务器的默认端口 5000 。</li><li>redis：该 redis 服务使用 Docker Hub 的公共 Redis 映像。</li></ul><h3 id="_4、使用-compose-命令构建和运行您的应用" tabindex="-1"><a class="header-anchor" href="#_4、使用-compose-命令构建和运行您的应用" aria-hidden="true">#</a> 4、使用 Compose 命令构建和运行您的应用</h3><p>在测试目录中，执行以下命令来启动应用程序：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想在后台执行该服务可以加上 -d 参数：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose up -d
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你想停止应用程序，执行以下命令：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker-compose down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,24);function y(w,D){const a=i("ExternalLinkIcon"),t=i("RouterLink");return l(),r("div",null,[u,e("p",null,[n("Linux 上我们可以从 Github 上下载它的二进制包来使用，最新发行的版本地址："),e("a",m,[n("https://github.com/docker/compose/releases"),s(a)]),n("。 运行以下命令以下载 Docker Compose 的当前稳定版本：")]),k,e("p",null,[e("a",v,[n("Docker Compose"),s(a)]),n(" 存放在Git Hub，不太稳定。 你可以也通过执行下面的命令，高速安装Docker Compose。 推荐一个 "),e("a",h,[n("docker 高速镜像地址"),s(a)]),n("， 比 "),e("a",b,[n("Docker 官方镜像"),s(a)]),n(" 快很多")]),x,e("p",null,[n("Windows 的 Docker 桌面版和 Docker Toolbox 已经包括 Compose 和其他 Docker 应用程序，因此 Windows 用户不需要单独安装 Compose。Docker 安装说明可以参阅 "),s(t,{to:"/blogs/Docker/win10-install-Docker.html"},{default:d(()=>[n("Windows Docker 安装")]),_:1}),n("。")]),g,e("p",null,[e("a",_,[n("参考链接"),s(a)])]),f])}const q=c(p,[["render",y],["__file","docker-compose.html.vue"]]);export{q as default};
