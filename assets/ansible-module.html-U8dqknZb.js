import{_ as a,o as s,c as e,a as n}from"./app-CTlNizBn.js";const t={},l=n(`<h2 id="ansible-常用模块" tabindex="-1"><a class="header-anchor" href="#ansible-常用模块" aria-hidden="true">#</a> ansible 常用模块</h2><h3 id="_1-主机连通性测试" tabindex="-1"><a class="header-anchor" href="#_1-主机连通性测试" aria-hidden="true">#</a> 1）主机连通性测试</h3><p>我们使用<code>ansible test -m ping</code>命令来进行主机连通性测试，效果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">ping</span>

CentOS7-Node1 <span class="token operator">|</span> SUCCESS <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;ansible_facts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;discovered_interpreter_python&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;/usr/bin/python&quot;</span>
    <span class="token punctuation">}</span>, 
    <span class="token string">&quot;changed&quot;</span><span class="token builtin class-name">:</span> false, 
    <span class="token string">&quot;ping&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;pong&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就说明我们的主机是连通状态的。接下来的操作才可以正常进行。</p><h3 id="_2-command-模块" tabindex="-1"><a class="header-anchor" href="#_2-command-模块" aria-hidden="true">#</a> 2）command 模块</h3><p>command 模块为默认模块，所以<code>-m command</code>可以不写 这个模块可以直接在远程主机上执行命令，并将结果返回本主机。 举例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;uptime&#39;</span>

CentOS7-Node1 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">&gt;&gt;</span>
 <span class="token number">21</span>:40:02 up  <span class="token number">3</span>:33,  <span class="token number">1</span> user,  load average: <span class="token number">0.01</span>, <span class="token number">0.02</span>, <span class="token number">0.05</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命令模块接受命令名称，后面是空格分隔的列表参数。给定的命令将在所有选定的节点上执行。它不会通过shell进行处理，比如$HOME和操作如&quot;&lt;&quot;，&quot;&gt;&quot;，&quot;|&quot;，&quot;;&quot;，&quot;&amp;&quot; 工作（需要使用（shell）模块实现这些功能）。注意，该命令不支持<code>|</code> 管道命令。</p><p>下面来看一看该模块下常用的几个命令：</p><blockquote><p>chdir # 在执行命令之前，先切换到该目录 executable # 切换shell来执行命令，需要使用命令的绝对路径 free_form # 要执行的Linux指令，一般使用Ansible的-a参数代替。 creates # 一个文件名，当这个文件存在，则该命令不执行 removes # 一个文件名，当这个文件不存在，则该命令不执行</p></blockquote><p>下面我们来看看这些命令的执行效果：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 先切换到 /tmp/ 目录，再执行 touch a.txt b.txt c.txt 命令</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;chdir=/tmp/ touch a.txt b.txt c.txt&#39;</span>

CentOS7-Node1 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">&gt;&gt;</span>

<span class="token comment">#如果 /tmp/a.txt 存在，则不执行 touch d.txt 命令</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;chdir=/tmp/ creates=/tmp/a.txt touch d.txt&#39;</span>

CentOS7-Node1 <span class="token operator">|</span> SUCCESS <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">&gt;&gt;</span>
skipped, since /tmp/a.txt exists

<span class="token comment">#如果 /tmp/a.txt 存在，则执行 rm -rf a.txt b.txt c.txt d.txt 命令</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token builtin class-name">command</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;chdir=/tmp/ removes=/tmp/a.txt rm -rf a.txt b.txt c.txt d.txt&#39;</span>

CentOS7-Node1 <span class="token operator">|</span> CHANGED <span class="token operator">|</span> <span class="token assign-left variable">rc</span><span class="token operator">=</span><span class="token number">0</span> <span class="token operator">&gt;&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-shell-模块" tabindex="-1"><a class="header-anchor" href="#_3-shell-模块" aria-hidden="true">#</a> 3）shell 模块</h3><p>shell模块可以在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#进程数量</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ps -aux | wc -l&#39;</span>
<span class="token comment"># 如果密钥不存在则生成密钥</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&quot;ssh-keygen -f ~/.ssh/id_rsa -N &#39;&#39; creates=~/.ssh/id_rsa&quot;</span>
<span class="token comment"># 当存在 unzip 命令时才执行解压操作</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&quot;upzip xx.zip removes=/bin/unzip&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要是我们的shell命令，都可以通过这个模块在远程主机上运行，这里就不一一举例了。</p><blockquote><p>注: 使用<code>command</code>模块和<code>shell</code>模块必须执行非交互式命令，不可执行交互式命令，比如<code>vim</code>,<code>top</code>等。</p></blockquote><h3 id="_4-copy-模块" tabindex="-1"><a class="header-anchor" href="#_4-copy-模块" aria-hidden="true">#</a> 4）copy 模块</h3><p>这个模块用于将文件复制到远程主机，同时支持给定内容生成文件和修改权限等。 　　其相关选项如下：</p><blockquote><p><code>src</code> # 被复制到远程主机的本地文件。可以是绝对路径，也可以是相对路径。如果路径是一个目录，则会递归复制，用法类似于&quot;rsync&quot; <code>content</code> # 用于替换&quot;src&quot;，可以直接指定文件的值 <code>dest</code> # 必选项，将源文件复制到的远程主机的<strong>绝对路径</strong><code>backup</code> # 当文件内容发生改变后，在覆盖之前把源文件备份，备份文件包含时间信息 <code>directory_mode</code> # 递归设定目录的权限，默认为系统默认权限 <code>force</code> # 当目标主机包含该文件，但内容不同时，设为&quot;yes&quot;，表示强制覆盖；设为&quot;no&quot;，表示目标主机的目标位置不存在该文件才复制。默认为&quot;yes&quot; <code>others</code> # 所有的 file 模块中的选项可以在这里使用</p></blockquote><p>用法举例如下：</p><h4 id="复制文件" tabindex="-1"><a class="header-anchor" href="#复制文件" aria-hidden="true">#</a> 复制文件：</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> AAA <span class="token operator">&gt;&gt;</span> ./temp.txt
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">&#39;src=./temp.txt dest=/tmp/temp123.txt mode=666&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;ls -l /tmp/temp123.txt&#39;</span>

<span class="token function">rm</span> <span class="token parameter variable">-f</span> ./temp.txt
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/temp123.txt state=absent&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="给定内容生成文件-并制定权限" tabindex="-1"><a class="header-anchor" href="#给定内容生成文件-并制定权限" aria-hidden="true">#</a> 给定内容生成文件，并制定权限</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> copy <span class="token parameter variable">-a</span> <span class="token string">&#39;content=&quot;I am Lzpeng&quot; dest=/tmp/temp123.txt mode=666&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;ls -l /tmp/temp123.txt&#39;</span>

ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/temp123.txt state=absent&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-file-模块" tabindex="-1"><a class="header-anchor" href="#_5-file-模块" aria-hidden="true">#</a> 5）file 模块</h3><p>该模块主要用于设置文件的属性，比如创建文件、创建链接文件、删除文件等。 下面是一些常见的命令：</p><blockquote><p><code>force</code> # 需要在两种情况下强制创建软链接，一种是源文件不存在，但之后会建立的情况下；另一种是目标软链接已存在，需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no <code>group</code> # 定义文件/目录的属组。后面可以加上<code>mode</code>：定义文件/目录的权限 <code>owner</code> # 定义文件/目录的属主。后面必须跟上<code>path</code>：定义文件/目录的路径 <code>recurse</code> # 递归设置文件的属性，只对目录有效，后面跟上<code>src</code>：被链接的源文件路径，只应用于<code>state=link</code>的情况 <code>dest</code> # 被链接到的路径，只应用于<code>state=link</code>的情况 <code>state</code> # 状态，有以下选项：</p><blockquote><p><code>directory</code>： # 如果目录不存在，就创建目录 <code>file</code>： # 即使文件不存在，也不会被创建 <code>link</code>： # 创建软链接 <code>hard</code>： # 创建硬链接 <code>touch</code>： # 如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间 <code>absent</code>： # 删除目录、文件或者取消链接文件</p></blockquote></blockquote><p>用法举例如下：</p><h4 id="创建目录" tabindex="-1"><a class="header-anchor" href="#创建目录" aria-hidden="true">#</a> 创建目录</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/tmp-dir state=directory&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ls -l /tmp | grep tmp-dir&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建空文件" tabindex="-1"><a class="header-anchor" href="#创建空文件" aria-hidden="true">#</a> 创建空文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/tmp-dir/b.txt state=touch&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ls -l /tmp/tmp-dir/b.txt&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建链接文件" tabindex="-1"><a class="header-anchor" href="#创建链接文件" aria-hidden="true">#</a> 创建链接文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/tmp-dir/a.txt src=/tmp/tmp-dir/b.txt state=link&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ls -l /tmp/tmp-dir/a.txt&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除文件" tabindex="-1"><a class="header-anchor" href="#删除文件" aria-hidden="true">#</a> 删除文件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">file</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;path=/tmp/tmp-dir state=absent&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ls -l /tmp/tmp-dir&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-fetch-模块" tabindex="-1"><a class="header-anchor" href="#_6-fetch-模块" aria-hidden="true">#</a> 6）fetch 模块</h3><p>该模块用于从远程某主机获取（复制）文件到本地。 有两个选项：</p><blockquote><p><code>dest</code>：用来存放文件的目录 <code>src</code>：在远程拉取的文件，并且必须是一个<strong>file</strong>，不能是<strong>目录</strong></p></blockquote><p>具体举例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> fetch <span class="token parameter variable">-a</span> <span class="token string">&#39;src=/etc/hostname dest=./&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_7-cron-模块" tabindex="-1"><a class="header-anchor" href="#_7-cron-模块" aria-hidden="true">#</a> 7）cron 模块</h3><p>该模块适用于管理<code>cron</code>计划任务的。 其使用的语法跟我们的<code>crontab</code>文件中的语法一致，同时，可以指定以下选项：</p><blockquote><p><code>day</code> # 日应该运行的工作( 1-31, *, */2, ) <code>hour</code> # 小时 ( 0-23, *, */2, ) <code>minute</code> #分钟( 0-59, *, */2, ) <code>month</code> # 月( 1-12, *, /2, ) <code>weekday</code> # 周 ( 0-6 for Sunday-Saturday,, ) <code>job</code> # 指明运行的命令是什么 <code>name</code> # 定时任务描述 <code>reboot</code> # 任务在重启时运行，不建议使用，建议使用special_time <code>special_time</code> # 特殊的时间范围，参数：reboot（重启时），annually（每年），monthly（每月），weekly（每周），daily（每天），hourly（每小时） <code>state</code> # 指定状态，present表示添加定时任务，也是默认设置，absent表示删除定时任务 <code>user</code> # 以哪个用户的身份执行</p></blockquote><p>举例如下：</p><h4 id="添加计划任务" tabindex="-1"><a class="header-anchor" href="#添加计划任务" aria-hidden="true">#</a> 添加计划任务</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;name=&quot;ntp update every 5 min&quot; minute=*/5 job=&quot;/sbin/ntpdate 172.17.0.1 &amp;&gt; /dev/null&quot;&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;crontab -l&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除计划任务" tabindex="-1"><a class="header-anchor" href="#删除计划任务" aria-hidden="true">#</a> 删除计划任务</h4><p>如果我们的计划任务添加错误，想要删除的话，则执行以下操作： 首先我们查看一下现有的计划任务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;crontab -l&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">cron</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;name=&quot;df everyday&quot; hour=15 job=&quot;df -lh &gt;&gt; /tmp/disk_total &amp;&gt; /dev/null&quot; state=absent&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;crontab -l&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-yum-模块" tabindex="-1"><a class="header-anchor" href="#_8-yum-模块" aria-hidden="true">#</a> 8）yum 模块</h3><p>顾名思义，该模块主要用于软件的安装。 其选项如下：</p><blockquote><p><code>name</code> # 所安装的包的名称 <code>state=</code> # <code>present</code>---&gt;安装， <code>latest</code>---&gt;安装最新的(升级), <code>absent</code>---&gt; 卸载软件。 <code>update_cache</code> # 强制更新yum的缓存 <code>conf_file</code> # 指定远程yum安装时所依赖的配置文件（安装本地已有的包）。 <code>disable_pgp_check</code> # 是否禁止GPG checking，只用于<code>present</code>or <code>latest</code>。 <code>disablerepo</code> # 临时禁止使用yum库。 只用于安装或更新时。 <code>enablerepo</code> # 临时使用的yum库。只用于安装或更新时。</p></blockquote><p>下面我们就来安装一个包试试看：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> yum <span class="token parameter variable">-a</span> <span class="token string">&#39;name=httpd state=present&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-service-模块" tabindex="-1"><a class="header-anchor" href="#_9-service-模块" aria-hidden="true">#</a> 9）service 模块</h3><p>该模块用于服务程序的管理。 其主要选项如下：</p><blockquote><p><code>arguments</code> # 命令行提供额外的参数 <code>enabled</code> # 设置开机启动。 <code>name</code> #服务名称 <code>runlevel</code> # 开机启动的级别，一般不用指定。 <code>sleep</code> # 在重启服务的过程中，是否等待。如在服务关闭以后等待2秒再启动。(定义在剧本中。) <code>state</code> # 有四种状态，分别为：<code>started</code>---&gt;启动服务， <code>stopped</code>---&gt;停止服务， <code>restarted</code>---&gt;重启服务， <code>reloaded</code>---&gt;重载配置</p></blockquote><p>下面是一些例子：</p><h4 id="开启服务并设置自启动" tabindex="-1"><a class="header-anchor" href="#开启服务并设置自启动" aria-hidden="true">#</a> 开启服务并设置自启动</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;name=nginx state=started enabled=true&#39;</span>
<span class="token comment"># 测试端口</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ss -ntl&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关闭服务" tabindex="-1"><a class="header-anchor" href="#关闭服务" aria-hidden="true">#</a> 关闭服务</h4><p>我们也可以通过该模块来关闭我们的服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> <span class="token function">service</span> <span class="token parameter variable">-a</span> <span class="token string">&#39;name=nginx state=stopped&#39;</span>
<span class="token comment"># 测试端口</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;ss -ntl&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-user-模块" tabindex="-1"><a class="header-anchor" href="#_10-user-模块" aria-hidden="true">#</a> 10）user 模块</h3><p>该模块主要是用来管理用户账号。 其主要选项如下：</p><blockquote><p><code>comment</code> # 用户的描述信息 <code>createhome</code> # 是否创建家目录 <code>force</code> # 在使用state=absent时, 行为与userdel –force一致. <code>group</code> # 指定基本组 <code>groups</code> # 指定附加组，如果指定为(groups=)表示删除所有组 <code>home</code> # 指定用户家目录 <code>move_home</code> # 如果设置为home=时, 试图将用户主目录移动到指定的目录 <code>name</code> # 指定用户名 <code>non_unique</code> # 该选项允许改变非唯一的用户ID值 <code>password</code> # 指定用户密码 <code>remove</code> # 在使用state=absent时, 行为是与userdel –remove一致 <code>shell</code> # 指定默认shell <code>state</code> # 设置帐号状态，不指定为创建，指定值为absent表示删除 <code>system</code> # 当创建一个用户，设置这个用户是系统用户。这个设置不能更改现有用户 <code>uid</code> # 指定用户的uid</p></blockquote><p>举例如下：</p><h4 id="添加一个用户并指定其-uid" tabindex="-1"><a class="header-anchor" href="#添加一个用户并指定其-uid" aria-hidden="true">#</a> 添加一个用户并指定其 uid</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">&#39;name=tuser1 uid=10001&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;cat /etc/passwd | grep tuser1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加一个用户并指定其-密码" tabindex="-1"><a class="header-anchor" href="#添加一个用户并指定其-密码" aria-hidden="true">#</a> 添加一个用户并指定其 密码</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">&quot;name=tuser2 password={{&#39;123456&#39; | password_hash(&#39;sha512&#39;)}}&quot;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;cat /etc/passwd | grep tuser2&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除用户" tabindex="-1"><a class="header-anchor" href="#删除用户" aria-hidden="true">#</a> 删除用户</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># remove 控制是否删除家目录 邮箱</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> user <span class="token parameter variable">-a</span> <span class="token string">&#39;name=tuser1 state=absent remove=true&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;cat /etc/passwd | grep tuser1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-group-模块" tabindex="-1"><a class="header-anchor" href="#_11-group-模块" aria-hidden="true">#</a> 11）group 模块</h3><p>该模块主要用于添加或删除组。 常用的选项如下：</p><blockquote><p><code>gid</code> # 设置组的GID号 <code>name</code> # 指定组的名称 <code>state</code> # 指定组的状态，默认为创建，设置值为<code>absent</code>为删除 <code>system</code> # 设置值为<code>yes</code>，表示创建为系统组</p></blockquote><p>举例如下：</p><h4 id="创建组" tabindex="-1"><a class="header-anchor" href="#创建组" aria-hidden="true">#</a> 创建组</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> group <span class="token parameter variable">-a</span> <span class="token string">&#39;name=sanguo gid=12222&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;cat /etc/group | grep 12222&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="删除组" tabindex="-1"><a class="header-anchor" href="#删除组" aria-hidden="true">#</a> 删除组</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> group <span class="token parameter variable">-a</span> <span class="token string">&#39;name=sanguo state=absent&#39;</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> shell <span class="token parameter variable">-a</span> <span class="token string">&#39;cat /etc/group | grep 12222&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-script-模块" tabindex="-1"><a class="header-anchor" href="#_12-script-模块" aria-hidden="true">#</a> 12）script 模块</h3><p>该模块用于将本机的脚本在被管理端的机器上运行。 该模块直接指定脚本的路径即可，我们通过例子来看一看到底如何使用的： 首先，我们写一个脚本，并给其加上执行权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> ./test.sh	

<span class="token comment"># 添加如下内容</span>
<span class="token comment">#!/bin/bash	</span>
<span class="token function">date</span> <span class="token operator">&gt;&gt;</span> /tmp/current_date.log
<span class="token function">df</span> <span class="token parameter variable">-lh</span> <span class="token operator">&gt;&gt;</span> /tmp/disk_total.log
<span class="token function">cat</span> /tmp/current_date.log
<span class="token function">cat</span> /tmp/disk_total.log
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /tmp/current_date.log /tmp/disk_total.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们直接运行命令来实现在被管理端执行该脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> script <span class="token parameter variable">-a</span> <span class="token string">&#39;./test.sh&#39;</span>

CentOS7-Node1 <span class="token operator">|</span> CHANGED <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;changed&quot;</span><span class="token builtin class-name">:</span> true, 
    <span class="token string">&quot;rc&quot;</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, 
    <span class="token string">&quot;stderr&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;Shared connection to centos7-node1 closed.<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>&quot;</span>, 
    <span class="token string">&quot;stderr_lines&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;Shared connection to centos7-node1 closed.&quot;</span>
    <span class="token punctuation">]</span>, 
    <span class="token string">&quot;stdout&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;2021年 10月 17日 星期日 22:29:33 CST<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>文件系统                 容量  已用  可用 已用% 挂载点<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>devtmpfs                 475M     0  475M    0% /dev<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>tmpfs                    487M     0  487M    0% /dev/shm<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>tmpfs                    487M  7.7M  479M    2% /run<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>tmpfs                    487M     0  487M    0% /sys/fs/cgroup<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>/dev/mapper/centos-root   17G  1.4G   16G    9% /<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>/dev/sda1               1014M  138M  877M   14% /boot<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>tmpfs                     98M     0   98M    0% /run/user/0<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>&quot;</span>, 
    <span class="token string">&quot;stdout_lines&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>
        <span class="token string">&quot;2021年 10月 17日 星期日 22:29:33 CST&quot;</span>, 
        <span class="token string">&quot;文件系统                 容量  已用  可用 已用% 挂载点&quot;</span>, 
        <span class="token string">&quot;devtmpfs                 475M     0  475M    0% /dev&quot;</span>, 
        <span class="token string">&quot;tmpfs                    487M     0  487M    0% /dev/shm&quot;</span>, 
        <span class="token string">&quot;tmpfs                    487M  7.7M  479M    2% /run&quot;</span>, 
        <span class="token string">&quot;tmpfs                    487M     0  487M    0% /sys/fs/cgroup&quot;</span>, 
        <span class="token string">&quot;/dev/mapper/centos-root   17G  1.4G   16G    9% /&quot;</span>, 
        <span class="token string">&quot;/dev/sda1               1014M  138M  877M   14% /boot&quot;</span>, 
        <span class="token string">&quot;tmpfs                     98M     0   98M    0% /run/user/0&quot;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出已经执行成功了。</p><h3 id="_13-setup-模块" tabindex="-1"><a class="header-anchor" href="#_13-setup-模块" aria-hidden="true">#</a> 13）setup 模块</h3><p>该模块主要用于收集信息，是通过调用facts组件来实现的。 facts组件是Ansible用于采集被管机器设备信息的一个功能，我们可以使用setup模块查机器的所有facts信息，可以使用filter来查看指定信息。整个facts信息被包装在一个JSON格式的数据结构中，ansible_facts是最上层的值。 facts就是变量，内建变量 。每个主机的各种信息，cpu颗数、内存大小等。会存在facts中的某个变量中。调用后返回很多对应主机的信息，在后面的操作中可以根据不同的信息来做不同的操作。如redhat系列用yum安装，而debian系列用apt来安装软件。</p><h4 id="查看信息" tabindex="-1"><a class="header-anchor" href="#查看信息" aria-hidden="true">#</a> 查看信息</h4><p>我们可以直接用命令获取到变量的值，具体我们来看看例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看所有信息</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> setup
<span class="token comment"># 过滤 filter 支持*通配符</span>
ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">&#39;filter=&quot;*mem*&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="保存信息" tabindex="-1"><a class="header-anchor" href="#保存信息" aria-hidden="true">#</a> 保存信息</h4><p>我们的setup模块还有一个很好用的功能就是可以保存我们所筛选的信息至我们的主机上，同时，文件名为我们被管制的主机的IP，这样方便我们知道是哪台机器出的问题。 我们可以看一看例子：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ansible <span class="token builtin class-name">test</span> <span class="token parameter variable">-m</span> setup <span class="token parameter variable">-a</span> <span class="token string">&#39;filter=&quot;*mem*&quot;&#39;</span> <span class="token parameter variable">--tree</span> /tmp/facts
<span class="token comment"># 然后我们可以去查看一下：</span>
<span class="token builtin class-name">cd</span> /tmp/facts/
<span class="token function">ls</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="其他模块" tabindex="-1"><a class="header-anchor" href="#其他模块" aria-hidden="true">#</a> 其他模块</h3><p>lineinfile replace yum_repository lvg(依赖 yum lvm2) lvol parted filesystem</p>`,100),i=[l];function c(p,r){return s(),e("div",null,i)}const d=a(t,[["render",c],["__file","ansible-module.html.vue"]]);export{d as default};
