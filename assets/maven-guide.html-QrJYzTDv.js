import{_ as a,o as n,c as s,a as e}from"./app-U2nchfLp.js";const t={},i=e(`<h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mvn clean 清理缓存
mvn compile 编译
mvn package 打包
mvn test 测试
mvn install 上传到私服
mvn deploy 部署到服务器
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="跳过单元测试" tabindex="-1"><a class="header-anchor" href="#跳过单元测试" aria-hidden="true">#</a> 跳过单元测试</h3><p>在使用mvn package进行编译、打包时，Maven会执行src/test/java中的JUnit测试用例，有时为了跳过测试，会使用参数<code>-DskipTests</code>和<code>-Dmaven.test.skip=true</code>，这两个参数的主要区别是：</p><ul><li><code>-DskipTests</code>，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。</li><li><code>-Dmaven.test.skip=true</code>，不执行测试用例，也不编译测试用例类</li><li><code>-Dmaven.javadoc.skip=true</code> 跳过javadoc</li></ul><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><p>packaging 默认为 jar, <code>&lt;packaging&gt;jar&lt;/packaging&gt;</code>可不写</p><h3 id="mvn-compile-时" tabindex="-1"><a class="header-anchor" href="#mvn-compile-时" aria-hidden="true">#</a> mvn compile 时:</h3><p>问题: 出现 SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;. 解决方式: 重装maven</p><h3 id="下载maven依赖到指定目录" tabindex="-1"><a class="header-anchor" href="#下载maven依赖到指定目录" aria-hidden="true">#</a> 下载maven依赖到指定目录</h3><p>添加插件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
    <span class="token comment">&lt;!-- maven相关下载插件 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-dependency-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 是否排除间接依赖。默认false，不排除 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludeTransitive</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludeTransitive</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 是否消除依赖jar包后缀的版本信息。默认是false，不取消版本信息 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stripVersion</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>stripVersion</span><span class="token punctuation">&gt;</span></span>
            <span class="token comment">&lt;!-- 输出文件路径 --&gt;</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>./lib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mvn dependency:copy-dependencies
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="maven-私服介绍" tabindex="-1"><a class="header-anchor" href="#maven-私服介绍" aria-hidden="true">#</a> Maven 私服介绍</h2><p>搭建JFrog Artifactory OOS 开源版</p><h3 id="容器版" tabindex="-1"><a class="header-anchor" href="#容器版" aria-hidden="true">#</a> 容器版</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker pull docker.bintray.io/jfrog/artifactory-oss

docker run --name artifactory-oss-6.18.1 -d -v /Users/qing/JFROG_HOME/artifactory-oss-618:/var/opt/jfrog/artifactory  -p 8083:8081 docker.bintray.io/jfrog/artifactory-oss:6.18.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装版" tabindex="-1"><a class="header-anchor" href="#安装版" aria-hidden="true">#</a> 安装版</h3><p>https://www.jfrogchina.com/open-source/</p><h3 id="创建maven仓库" tabindex="-1"><a class="header-anchor" href="#创建maven仓库" aria-hidden="true">#</a> 创建Maven仓库</h3><h3 id="配置maven连接到artifactory" tabindex="-1"><a class="header-anchor" href="#配置maven连接到artifactory" aria-hidden="true">#</a> 配置Maven连接到Artifactory</h3>`,22),c=[i];function l(p,o){return n(),s("div",null,c)}const r=a(t,[["render",l],["__file","maven-guide.html.vue"]]);export{r as default};
